#!/usr/bin/python
# -*- coding: utf-8 -*-
import asyncio
import datetime
import logging
import os
import random
import re
import requests
import time
import json
import pyrogram
from pathlib import Path
from pyrogram import Client, filters
from pyrogram.errors import FloodWait
from pyrogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from pyrogram.errors.exceptions import PeerIdInvalid


garant_path = "GARANT" #стата 208 стр.
scam_path = "scam" #стата 

# ------------------ Переменные ------------------
reports = -1001779113329
channel = -1001415990331
rassilka = -1001762214434
# ------------------------------------------------
id_predlozhka = -1001662137857 #слив скамеров
id_offtop = -1001556322936 #оффтоп чат
# ------------------------------------------------
linkpredlozhka = "https://t.me/NO_SCAM_HighRise" #слив скамеров
linkofftop = "https://t.me/+Dz8j2vMmXBtkZmM6" #оффтоп чат
# ------------------------------------------------
username_predlozhka = 'NO_SCAM_HighRise' #слив скамеров
username_channel = 'Higfrise' #новостной канал
# ------------------------------------------------
version = '2.2 BETA' #версия бота
system_dir = ["admin", "scam", "db", "db_group", "GARANT"]
# ------------------------------------------------
owner = 5631980944
owner_username = 'pas_0'

# ------------------- Гиф-ОЧКИ -------------------


start_gif = [
    "https://lh3.googleusercontent.com/fife/AMPSemePG_vwGzr-JekVfYZ0TbTon8Qx5kwuLoFCa5w-LDfzJV9mAOFCYIweum8Qk3kxaJs1K685rVRf1xCt9P5ITUq8R5-xWD5BF5tngTzTpoHnRzXisQRHb3ykfscAtZ0dYUapnor3WpMZOJ22BwsZdqITw4xTZATujzKsT5mDb5ywyr7i9C4PUoyNBJCQwuvYiocR9zKZ3S1KHxs3gm4MGnl1cCLDJ7C7VrUK30jK04FQAm-jcs-l8IHBVTFK0gBEvvRcCCSF0BriqANs2y6EFPBW552-Xw7hY3X-DH5ZrVmD1OUL1xon9aiFoce-JKzXZwm_Z85LapRoM0WUqB_rs-jeJIGhfp_O-aZ7j3mZKp-HYuAcDjBd5HtPedS021Z9UaM__a0UzoIn4kazwbOE09eYzDpYqI9Qb1SBklwznULD-ygGkztY-9TjdEXp7RxmCRsSqRb51DHHzKRjIZCLV6uDFOtEqVfi8Qmt2X9xV8FpTNr_NA9Z1JatQuJHuSOUJ3zoWeSS1HjOvQ5UsDERKpn9_Ry-sD5aKHaAOuRCucWesZX2gqU0AXb0dKkvHkn6PGFLt8cfMhQojLhsSmpDN2B6fjr1ZJU5zuQcuXEmmnPr0_wE97G7cHRvSKnFxVUYN6U1H1ooQ5VMEWRhLOahzSmpVd3QuwU1y1JOEi18QNmiNTfwqPCR4ZU2ZVufpOMd_vyezVw-FuBDlJaWE3SpGu233rL09I_lo0a5hhPpIiTYJDodyGXNcsBcWiqT-nELR10pVD_PLNliMPrFEMP_ieLgoXkMxuOUoU35mgY9ArS0YE4V2blRnBH7O_ZCppsNz9X2M0OHSWtcNXuR-lKMrx6Uckd3IQ5quwrk3S15dqsv_edSs01vQVMlgChlWmlrlbXIdJRJG3gHRTW-_L2gVkg-_hQ3rXB_e6pLDjCAh12UfzhO7OIulp_DmWozDL2XThviLgqY4hGEf9R3CcWyR3Up0ml8APYWXkUE0L-SUUXWo5sVkBHtbA5iANfWqXqwb0p4ypQayUi6M0EcCpypcxPtckmqtohdS9iDm_NAzq0k5EVkm6LvhEvNghRsWvB9NaOubqH8zCrAZU4ZlXG2Zx8KIhY3jYzsT76mLjqDihyXow4ExBeaYAXfB3103Bj2qd-jjJm8sFZ2er9eIcvbLj9PtVUqVWHCtNtLbgRVs7WMnnxD8022UrKFfkbSA0rSUhymdTg7gtgGKfahhnRewPjGoKSQQ8tsYJdw-5mgna8OSXgkjnxSy71bxDPJknCRkU42ZK2PXPaadyCX96IEZqiUr1yD-_x7u8c_ha7oRQFs8R78ZCpG8F-bWp7pSJeHpENog6vOF8vuTeGAT-WLO7TNoR4Twi2j4mewwN9iiuBdPZRkTvC6hLgXMDeBObBiljRpFcIkOycJ1plJo2V8MIpDhORnh8hPYNfiOQhHfS8_16ZcBlAln1O2WH-wfDsoEfzBfXiUhHtUITmqDGXyCBrVxZA9k7eWNQ0OIAADgNhpUoa2uWpI5abu=w1632-h878",
    "https://lh3.googleusercontent.com/fife/AMPSemfQzoPyY6r0jjsW5QLWNYlnO15xKfKCV-a81eHOXNNzHcSvQrrvX5gABmlJNqA-289Dj1voE1-sJ3IDHj8sJ7y6f12AXfudD4w2lN_SF2y5rV4kbSDYb25Z-5cUfJFSh-p8LZCwPzItUjfFxGJ7MH1SY4tVDR0k-zRvDpb2eK4lVgoDje9KkUKmip46TdsTu_NTdnNWM1MVlwWRVcxicL2C_AbENOfE0xkWvMFF7Ql_PP9_CDmGkDNl9O1CTH9ZcSv0p5_MdUzkx9itwTIQxfl52FBabRySpzMdg1kTbKjH6FngLs3_jPwGtp-i8wnKR5EeF_V7NWVFFSvWtQIz_DZZ1ZmYDOjMCjv-pTggfibyDzrNtsOHSCte8l1GL06yEiz2UZG8QS9gZXnw3BQ04BpJPySYAmOTyJ3bmB2ZZnoAZiGwXGzy_juB1GORWud1mJSqCFyqHp1RF4E3nPTDJd4qxGpxvR5GDoNxZWgp3bmDa_m7BVvCkXsBLegGFu6VklzrSIyVjNPvSfD1PkEnUSZ3uU5x93IVWSBmp-3xhMpoum4pCKcfpBQKdJAGmQcakkIB6vhhmMQ3DG1DUVJX7XKpCorzu3TAFoBbP2jNLMN809U-XTYC99e3E5tEzQfioDFL6sZ4__9uwc6nKaGqdRRL7q60cacaMBp9JuW2lYysUidNzWkMblBuJ_qHewCVfUkAKe9ZRp-ZXEQyjMAeFAV5_RSrelUDopC4_IpYeFJImDSF-Nwb9Q3utISHfHjg-ZeIVihVqHB1j_EVCFl7woULb06YZ_OD2RTPRUGiMuy7xtCMEhYEfNpHBBHoRaNof6LRh9fTI_gg9cJMxTCE5gj5yYaADh2d4Ib7Wgv7Op531IhqSuwczdLXpFp5bb6EI5clabRckXcmxwqy5x3QZrpfsoM-0RjlgXp0zzOQZCcFdRO7zMUi9DMqiVCT8xUsKl4uHd89omdeOOVebxvv5F-L9ykcUb8ZDGDzPNoGWMELpWNRSQkMT0Hbf8MScew-hO_jhwLvvFmqtPHSEn6vR0KpHJ2HHndfxG76k9SS19dkxVD2pkCnH2AfHA2ruEu6siige9r7LeFXK4Ei9RllpNfgO666hKnczfi01xjMvY9sVUGH1rAjCHTSG3WQD395ryC3-p1nGBmGcLTPPvixrYvpsBG8FA3Y67qBn8TmXbDyE9ErqT40Jq5ZMPaGMgNY9grmX8LHr_Yu5ODgzxvdKGoCuCTMIgzpa-FAfGB851pLZHitd42fZk567sq2IGUBBiOXILTdLlXHmmlF2L8Z8tINntv_R9nFm1WVtJspN2aEqeHKiNVDcJ17QQvFHZEAa2JR4P3qBWPkK4QSthsKd88_G936Ee2_JD543EkHzWom6VkWKjvDAWxWKulXSDicBUyhQt-EBtliYp509uLmIdxiYhjsOWq52n22IGYFY_1dNncPc9cdtRS2vf0vFqyzUPTNu7cF3o3u-ZzQjng190_yH20AhHN6BvwXoLxC_kkKmNXJ_7DpPB30=w1632-h878",
    "https://lh3.googleusercontent.com/fife/AMPSemcLtK4mLeCH-gapsk-lbxOnrjqr4laINiSNnSxtm-qdC7-W6eNdY2AtEG0pltmiKU3DDzIkDnmi9sQ7f1FBaWBaA_ATDNb5PVekAxgv1swDLVSXMmlLvPneUQWNrzpGVNvzgkKgjND0_s8TImcnOJImJArwiZf3Ne0f97tm8QlEgtFPwIAVK4vpyElYh0-kmKy4V3fczSJI-R4wD_ZrL2PiC5nFFEE3R9_O9XXyladOhlh16NyMYUNa2p72KUs_OMm1htdXYJ9PR3WuDoUWG9wq1TvRkVJLUlrvY1jk31oabaJv-YVaDmM_2CgvwmEdH3O8SGRNEa_eXlIIIiBMR7kUtTlLVCEwyUG3XY4w_PMWJ3K4Byc8GNE3cbEyndySSPRNpUuEia-l9z3VNO9wVT1RXuIo_PJz7h3O27O-VSU0mS1BzUkNa-0t7qEFr5W0Ggo60SL-1_Tg604_yAu3miUklDvSh4VEP9018a0C98NRcqAuWQtyH06GKJyyu1FSTk_-rwh97_sUqErTn6U1FUzCkYaWZ8nZFh9_HSxt4GSzD1OEVNpURJClrFcCw_5jz41-bplN9Ji-eUeJvxTQlnwhMpfXogUNIDxayPW6BwnXRXnnR8werPeylQaJDceRbT36UqocvoF9duwlkFoqZ8veP7E2l0yl24Az1RbSDf8cwfXlRUGOk7WJth0mhVukC9UvJpdksJr2Hkx6YeeWF4rYl0q5_njmtknfmyGLM6qb0M8KiHN31TbWC7GRy59KH4vL587esHk93uCpV2U1tkkLROmW6QZ6XIxcflGDhF6l4O1QUFx1uLbUVUa6DnCA4MSN4p23n6SVB8RCwPuwIXYgEVkqLbxi9IJBI-oo3KhCvRMJrpgB5hjO6B4TdDHVySCDTg5G1QHB8bEA-wGeoGr5xXItSLzFCqn8qyrRZlmNcByHYEW6N9vOKn8qK3ToT3L17nMvZWXzB9fumo-OFlmliIrOO04WpWBhUO3ygHt5O1_TG3ruTfQDNt7VrZXysiGxuRTBE5cpgJ4DG_P36A6sKlsZXNrYExHcrnRcfIUB3PHaub9RDCd78lnM5zhwXcr_tE515A-PXF3ZQ5YpnZQMpeGfvLACTHLlLUvORmrG9yc0F2FQxoXlA7WlsyFqjKpWKLlcjImNMTEVAqnvFEQL2hJ7kQ8idh_pWLgzJfnEZPoftUAR00G7ZnOQPpmm0osahB-Hc3I63ij2QMeLF6mNBTmmy21Qt99oaUKEY_O-6C3Jvd2zckdiuw3YAG2DE3de2HkG47bOYQGRMNr7eq9UOKEDuAUdfQy034YNzdid69_twQVTDeDfrJ3tkzCY4qTccj7q-z-tUtXmq8NYdlMEWRd0hiF-4aMr_3GyrWSQ55Y-2PN7aZCACUT7UfGrLZzlJQ__BxVHv8dtmtmgV0OtLD5hnW0D8h3iyPUiveMJ3vvssuAvrV92Lql7o31sItDt8RwSeZaoe85tPFhOhP0efZGALn16Wsj2-ATyX8oKNlSJOctuSgJS=w1632-h878",
    "https://lh3.googleusercontent.com/fife/AMPSemdg70uOYRPFHUxlWDaSt6wWLQnPwiTVnFYE_f6BYN1Ay4Nd9hNH0sXW_a7wPqxZk4tSGxxQPI8K2cFSQ3jj3bN2AumgT0Kq_fDb3eP8HihiXEVuw5PewMMAKspX7dBiIpm3ZHC-_vpez8-Zniit_eIaCL7cjAVdXSx_wYKXkXufTZFTJpXx7erlwWuRV9qIfDxOer8xqJTAE2fHU0ZA1Q4T2RWTFauIW3AYVUnZ8MOgP6IP9lUiXeAGEuKa2bE7owIf6Iy87W3bRvGXSotpwMnCJM02f3S0_rkq8FMOKigi6oBPywL_oznnyi2kNl0owHayIM3Pzawq777l4xup1QXV-8lzWfvtu3t9ho8yClw3jlFSttwAEM5SQRIDfN-2TqE4bPIdkJzZsb3_T9rkK-vQwbWPecrrqc2nLLEp4BaLcLM1Nu4rmh__WYHCw13es9-1ZuBbYLZ57XLnAXIb_Ov13FPo3MIVyLB2q8MzFeRmtAHpmENhf5EDiyv4QgJrcGiecnkDEEooEFMW5nqeMLZy2sXsjCdlewgI6Jaz-kAPfKLY65U5MDdibvUty7filUudycjgkPBxweH_zVSsq-GtCANcrOQU1hrLLXGBmsLVOv-ddumMctMmIay8svhUcFcDEPOtRx0bawr0JaEQxpN8MAUy6BgJftK-gz7A5J_jg6e-MvQTzIudq6ToxD0NquKKyXfSZXo_40p18MOvsrfllz8OVs4JPZ3KXxxqKgoFBxNX1L6fXUdTiQ9V0h_pzEnU7egKys7AhTlfdRtjLysvfBa3VUURxD7f3-3aXdGozfqTskMGJVjpAZRHII5PF9HRRUrYn_DLAd6qc9W6jhoqCB9Wxa3Ihpk5jVjB9aTGs7qsyT2sgAxeNq4JAkLxB8Kl4OCkQkG-jP1ppzYN2ffQ2PUlPCMVL6w5jrO-O29WgKyiQVU0pWyLa4bY3Jxq_tK1eMqoXGrW0kLQo4Sbd0uc5bgBpuYLXP3coimIX5xEL40jJP_x_0DspUQRhq8ClaLfZoNemhnNvjZcLsTj7SKMEnd9MArySKsxjj9RJdnAov3RGbtQrgw1GaK3LsrLRfmkfelRaZWyu3c2cTxGMTQlsk4bCngOCfA1M4tt6ozYGvUZFMjdZLkSdTsfm9hhRXL5mhzv9zY18Mj_dJ_RxMfjCqW3DfGqxAMstY10w2r-lkoHtXHkskoO7pc-v5cig72GWoJ58miWz1In08H35PAjDeDCiNq4sZ3lI22PNRbUFB1v620deGxtK_iuKJ95k5VLDxXW4fqMGifXaRpJF_emRW-bDO7oL7sfRCsT85DHrUOFMeWcUbhBdj_MF_7N5d6DbtXZt8bkQlTy5LL87xuviLiHdryvlvjRLzoPNa_3_FWy209LupTL0AP43y0YUi1j2shxRaCjTdb7YTbC-hqHybCv0V8scyvkTwiVfAHheZ6r0jAM7_lr15aT3v0dBBwmKpL6fUWX8KO8ZV0_kuw5a84NLy6ipaFuXrOwHc1syZgFVlYE3aBz=w1632-h878",
    "https://lh3.googleusercontent.com/fife/AMPSemedWwZY9JcWqrzLt2SvPzF7pzpEzryuK4CTP35HytN8Q0OJsmDcNmneeGMUrgx0o1nPUqvwREm9fDwA32anm5OgrS2arXoGHArvQdUphP3NiX7TkSAAeMqHtU9k3P_Ns77Xe0Uhj06zPAOzrxL1BihXjAtwPTRSkG0GaDBxMQOqHB7gCBtPZtu2qOgjmQorfouFSGki0smZMzKiHL_mtHY7jRp7W5YNN6iVblwZxbxfhjay1CbQpfAceUNN7E0jQ_bczfB9oJnRYby2sgnpSW4_OO5i184GInJvd8xdhKRKnmlf8OBZBYHI0xP6B_YJw4vx1M7KWR6BXeYJ3zbNtTreu9h5n-A7hhEuvQQViCn1L6uz1tsjsjK8Dk1hUw4rRb4kvm0A6mlHFR0j9PZFWDrjwVY5Vp697_ybSVxTJ9MCFp2qWr6y8crGVnrcevpsgsfnL_opI9SV7MeD1lilMb_Ums7RWjAI8gVmSuM_0bqyF99NRq6Y1IqcTFSVSv6OE-gV3f0VHJIugreXffvUBW1zHfX44dOEQPaXHpoQGR_bjtPXFrXT4etcz8GEyi4eUROPnWb8z8eBbAXO7E_y_CphuDICa8XJn1se5L-F7iFjmsyJbwsHDAIWHpT_ont0RJY34JT3jcduZIv7x-nhnkisjEJl060b0g9nKxBBanWAyIZ3YzjEcjL-pTUcJFhpPKB_Om_wiuPGyXIdfhCRn9hlzontV8Upg29O2AtijeMwvUiigBuEfK-OBMdTEzZV9QiJQqfRH9X3s_ol5Bg2jVE17DOtHwapc8AtCkbu4CZ49gMnLfCTRqATTitpVBxqwB8C6AIcDVyvXtja_cP-2LdIX56rKDesmnUNVGa6buoLcb8mSCbekK2EpubZ42joN3tj_6pDCwSuZepbeJzFdlipqHCJDVueTWrawo1Pa7GtaV6bZ3qk98ekdgod_vScH479MKwEVrbdr44VP_MdJyqi9T7x2iegYew9geZRsXG3zI4zx5hqNv6U7X7iVeawXo6Drze1WzHHX2nlqZgp-k8Vv82hmNrBxYbdr8BsY4BJMoYXKtPTop8VjWNiCoSMWYSwcA4N3Dzt2zt-zOpDr9hUiUUqLvM2Yur3lyV7Duj2SOXweS4gFksvsmEjmB2Gya9QuDSeUAwCKbgXkL05cMURJZpAqWRlCG-Rn9WNkMGqertXsgHwHmEmXksGNVjcdyHsY4W5CxHNuHMiMQ27q9ligGVPOj8cd8MpNErWvYH6ns7cix3pff_rI5phETr8Z7SDym1ChIkY9fiULIPCBSv_3qrbvgSlr-842ATsvpqAtNIKMM-D-6xE7FExvEwHW1gOo7PJc2Q8n5tAhWyzlAIcA9jOtEDkDYIAzCvOlmW1lVCOFPO5SA1jvIXQvfRF9SFVLOPxktYDPNbsKANWHo2Pu5_mZR9KForvUsaQ2JNX8Y8b73grcnMXMpUveKoXCDpPWv7rrFa0WETsLDovlEjDFKPbHCKQUSUBi4GnOFoIwm9RUiom7kGz=w1632-h878",
    "https://lh3.googleusercontent.com/fife/AMPSemcUmPTxUGtCSvFSLsC0rizv8E50A0CEyuQh0rn9bf47TsHLbdTJGem8fmPH97EIy1uQFm2PGJmEVO-N2cCqucRmnts-VHbhVjLL23sXJfYybVw44CmHYmPE0SkpnH6zfaR2iearoqpa5uGgrvugCSGmy8RPydWDXPqp6WtSiLrq9y8G6eVYuS38X0IYIsu9gpoLUEyZnCPghaQEQYdrZJuVFtWCCyKMCT5ioYoLoxkucS5ts5RFppc9bBUclbV7vaq7L5fEpX--7eQFDpl4PqmSWCFQbvULE9DC2zVtN1sC81HA1D-frKELsFeOtNqFJ5os7BCCepsZi9mLUvocWbnEOjmUBjnMVkzgauXzoYpzytyzKeZEJNlLDIN95r5DIPSftKNIPWi9LvHXyHt8C_ExAlJCszieqg2b9UQwZtZv5dWODcSf0W8Rn36cTTWJiEOkbNRKTtSmwxMThmIlcqN_quGu76jZs7TvU9jUtNaxpvjsocwpNPZI2FNHJUlFedYqW0wns18kFRZreWB2tEHq9ga_lftvE145gl0ijWCYdR8n5mAYLod-eQkLQyx9N9aBS3WGVk1oIbdb9mO58pQQc3T9YHWBkAHqNpT9ngX9B6oyR_q6vduK6oTa3qSBW-yUuMPygqmPAZHzVC5WZcDHOoI4M_ye6Kcy54e_tLX1Bwrd6y07FlEr8zwgoXAg18ELBJpd2yUQi95SouymO_YNbY1K1UAhcKNS_fAPk7S2tCXXnmwZsNsJhzIzHBcTxqtMN2UFO3o4myK6f4uZ2t1f_PFs1B1M28vVFjJTivOw7gT_2sK5kWHGU7XVvh2nKc6rB4zUGm-H7vT3saVB33YFC3QjRzcvHAq4yvU1174nuiWB9oPOXS3lkBZAKidAWbxU5VG5dzbvj19K_5GuQ45Zw_XE2894JOKznpHgi6XX4pmVPoitS_uFzLlcVwQ3utMdOKZf86vQQZ5NZqRiyJAwBIQgdJiBKK_W7ubJ0sMYKktVuXZyflnF0UTlZks9B5Wvvnevd5qPzMSib8igXOeyDld06yiyk0s7NiHlc2xsGYsAynLnlI6RjwmJ7nnfRsZcKVHmAbEFkQpAn9aYe5ldLvU-7J1DYYAp6Uh-723LxoIUpkE_sag8V8D5pb_ndrCIrhMEUhATQSUDTbta1Jg72Ae-tSGuhmZAfu_FWBQ3SCxEeEYvzy-YGCrzjBBV7G5or5wewMGRTNkF7CTFwoshW5-rFjVtznDxKegoJ15bzliPNa2B3JUjitHvQ9zUn_2ZjvGMecfEY42Zx27ydvYaTJZVy8_k60-M_vuTCvvT4EEWjmH2xhQfXDU_tfLq6hcm7pnq4BeeOaMFBPeWbS6HR3AXePywro_57Aze5udho2XNGEFCbsrAi-zH0O1fdnZu9ycUfIJY1vUY5AhbmTNzcA1zllZ0g8mB9X1aSkrlt6HhaegSkA75sJ933nazWCIhaDGTqqo9LWzB-nvODxQwNRsErqe9vDN0XU3-gDL45pzfbPkSwtmw=w1632-h878",
    "https://lh3.googleusercontent.com/fife/AMPSemcCvidsXQSz3RvesejoSD6SYIGUE5lVW82upcWOuCE-jmGzYSwCOc4fdIhB8NuOMTNtX2jPrLx9rCFgsA5ejB64TMQn3Z5vfpVMQPZn8-WVJKcGII6hjb_lQfYl-UxHHDjqocsUcEsptP6OHdb13tiG3CD5PQBVHyhILPpkvG09V5JUmqmxGKy2xwYvj9FACkCvySvK8VZd_f4MwMwM_7hYbBphIGHJ1dHt2l2ODzhmhDvT8qCPOsYfPBrw2d-cGSTakoLU40FP5y37pX0sPtFVeC72xkMfhlwOfioQuyEVNtm5tPzOU66y7JyCA8uCymkDTcuyllG3omnLfZcSf0MZ8TXLzv4LlohmubpHMJsddShAJoU08YdszLiwemR1s0ciLh-pwpuCqyu9LZw33WOr0CN6xQM4LtKaoj24ZahonXJ8zYCFEnkU3yZFb_3Kbs0J9xb1c87KBynB1h7oe5ITFgi0wOpmKmDlJCPePQinPWnpOlGAKc2hbIc7PkmbyT2mpHqOPI_PLlava2Ad3AxSKhVkykdoftQLo_GJx8V-ObACtz7af4g3eGSibsx2xF9I2-iGqwEVPK_P9fakN4znnpKoIBtj0_j-4F-RuG37r1lmbGtwRPkd2qLNtWAAaxDNDcT8Xrv9AtxECKCGPOth3v1fjph5Lr8pizwpWyjOmPV5QDz2V-edXHH0yOLKIv-ZO3c1l-9vJJOBjxXD1upIaJ0FN9zQbEqgfT0cuzS0zfi4WgydiJA9wz8vkPApTwP3th1EUnhrCMMuf5cUhcqp265FutwQ5k74JwKCaA2u8-GD9qX32TfnKUUDVaUR0j35Som5DIVyc1WEyXBhTXqSsW3CkNNZXtQD45Hgj9oygCk2_Rl7Y6c7YUsrd_pETV11aE-tGnFPu6cu8CDyl9g7yNNC_lwCdLUnIkdLEjKRVpj_rQStsZkUrEqWH0tRWm2N3PBagEwnYHSu0xsaGJSGyOQwLByATOA40fxl1dhy1D_BnnkU4m6aeiEmPR4L_QgISt0Pqg0Lzqja7N2yKaSFXxl_2JPXARfA-pMXNL-0ifLyWONFaPTt7ENW1jLORiB02NKKOAcyxH58H5Jlw6J-qxgFjX3HzVymKNjSG4aPl_nfMaPieNvP2uNeMX4k-nc2euARd5GspNDl6crlvQCMmGMWhc475fgcQ5MNqVoj-XF2nCP0N6k3ibNV8AccGUWKxHfru8BOFZIhSay3Ihp_1JhX4sFOXgGKiygtz78D-C1akNRliqUyZYVDS7SmdZk2yfg8ZX5XkOxcL2T6l79bbkdDEgKxz77WeyYcHToCkHCz2pjRkX_7IU7QfcIUDjLTh6cCEnJI5YpSa5-eliccW26iIrbDcGRztmJFBdTtVYUNNxpasO7xRM7rSE7F5wL3Q_pscmlw61Mfz9q8PtFceyhRdFxBlrjByQMeqwrblZ6LfNJ7es0IInGuXzMQDfMk7hPQjvgfE260EnrcV2d9QydnOfY9nn_w9ZdWkm57spvRasAfAU6j=w1632-h878",
    "https://lh3.googleusercontent.com/fife/AMPSemeE2SHjlsjpx8pKCrPq1MAIQSarSqA6fD__T6PkYV0jVK1mCx-ExsjOgfbjxOxZf8TjvZzwcDBYbabGSrzx325OSNVUjZLo-X-K0N5iJrXe3LRRfDFFQgnPmy3RnkwqZHMFnSFK5UeeeISylHYPhJ8gj2ExjIdiIU-E5JVtwDIY8nF_FNn6JE-Ymq_CZDmOLKZ2F95GuJxhy6eL7iwSvMojOMvRGgNbIqgp1w8hSJlG_gFuIouDKB9BNnihzjoqhjD4BrpYFKtcDfAUntJ24xqyuLr5AwA37pWxddhsvc86EVXYw7EtQzw51pDxUcE6VXBsVPWIz5sv9gGxj3ER2W2di98qFAeegKxxtT63whquUjTvnt-Ph2rO5rvFYQe3uv84lT3oYi_jo3waxj86Wn667hqsYkUtkAn2v873xYnAziTo17i5GqLofICWSW2DQZSpf7Z-AaWgdTyBaOQ-bse2Gms3JP7Oy6zvhfIMtibfg4qeYBpntUIwd5D8xLBC650xQ-CW0e79gUOBytoLGTcy6K9lDTsrwDAXIgG6E3AoCgcLC3Nu6DABc3gwU3zdfwVVzHfGaXyZ0gdcuL83-Fx3VKOi18bEZKB_RRLPD-8Ci3gsWUpjFOaHx7LfKPntPWQe-SJcGGfq7CCIOItqau6_Mwl-b7vSs_5eZeelBY0mTpcXGghOCfiWf8pKK4RoLQoVa1N2uPTS6ad8nKN5CfbZeS24AeX_X-RY8C_FvyLOW7jpbxWqx0I7_7naWP7EqvNJwCarCk7K4lIwSgKzJ5h7S9ddw2taC_jFFn_UqQ8z5OpP05E8otlnueeDpOSXMYYI5_UsLhhWG25m_kZpXjCHnVWckLivL06OUAyzXV211TQMapbBWIVRZXlDDxjtYxpGZci1CekLt_5tHR0qVXJgsFGqG7eqGxn_l2gbIyVXHvuO2yfCXiKoVO80BjUu8aigRAV6KBTFRYOlCT3PsHLAa7tAw5repid7W13or3wQPQ1t2IXhJYXpkBYD5Jn0K_UbSfqoQuQHNasXMGgeofnRMLJeB3KnKaRCkgj8TIfacPrtTA-pJrcZnuOsE8K2f2nK-m75yNnUQjQ5shvIGzF4L91O55puUQjR-gnpnkEB6Dhoo_JVA9uZ_5_sU_QA5xAuZf15aEhfnQGgLAQ11i4OFhdAx9Ifcl9nsc4pghi0hiluWUcKBkyh3Tg88b8kG0ajs1HLKfHmldP5gr_N7dseuQjUAxom_kuch2xnoc1GAdspTWgfYCxspxo6uWn0x9asq-wWubWFhq2wohqiH6w7PXRwVLc87G7XAqMW6YxBcFcpo_Y9XR7mYeYNyxL9lxsiJRwWwlD2dJNrtdG7Tir91o3vA59oqtK-4SJC1JhhReiL2SWS4FvW1eNHxPYmmDRyUNxns7EueZHY4YrFNMZMuFfoOAzq6Wprt11SEJngLvn2NCcS3J_xNYVAisgfRrZWWZlg1M0PkgwYi6kHRpOEt-ekBeKuwbqzKF7k3bYhbt7eSOHtxiJP=w1632-h878",
    "https://lh3.googleusercontent.com/fife/AMPSemfZjoi7H6F-vAHocoFOvVWWHT-dXNMGfc43tBJFYWHHQzlSrnemBh3UTkTAC61VPzomK10SO-qTIfi6bCHgTlL8fxzXJGYPR8psfcxBVi_StpeAKpJswsOSMTIyMPw6Wfxri5sOmRwWzzuwc98eYg8G5FV6QTuw4PYoTCuHrELsMNvPEh1Av-x38fzm_ms3EfB5lVZsrlhu2LC4JxjDOZ2UblYfudDWLTy_miJUkenMdzKJreCj-N4hdm3IxK-O090XalLjptuiOhLEg7xMFW0_7K2DJebXjC1lQz4PfGLtVCVULPor-ApGpPbAULILBS7mi2zMJv957evPYvT377QHRjU0j3Jd9rjqIhez-TLmFW2hSx0MzSeT3ItkTDAquNZWyxRmHb9F3ta0sO68P5k6TV-SaJKVcqYBGXXAvrW0teuF9iDsxt_07Fh3sDvQ-sGiMzk1CygiP26JoCU2e077qZacFVFXo979yGc1FbT2iv9kkBkFmkECmqinbXTCx5XJToRL8dZB7JqR76HwAEyjUGdCAmtdFPGkF2Mw1x8lZfJop0ELqYk098x8PfTiJnhHF6X3K5_20H-gJogh01cdG9qKbnycnwjR9ecdZbkh8xcMXMPOLrP_xs92w7vwamCuUV_DDpg1Z7FkVPeKBgVo3JDBeRonH66LngEQcYmWMwDDHIBbpQ2EXvKBYMVISeJug33tdEVex4nj0GOyVurtbWEBPaBPNnh15FA5q8rF4YopKd--2vddusePJtM4uAUJA-mI2FwLPfTjUZ2xb3LyqGICpj_NPr2oQAaBPb2dtk1gEw6lIkxgO4IuhM0jh6IPKpaFagLM2D7uuT-BiqBYBa0D8d0n-0ZiQW8sxHXxe7mWas2sQedPPAJhLJujjWHax5fPXMMuN5S8jFn4rsD686D4pRdAchnFk41IMzk94uq1iFqz_rkpPofE1OwV6BKMdHfeSCXusxfcrCorSgOOMzphGQiZeb8_HQ_gO6w5nOgZZq80FeptOWlNLYKsf5V1geihpeSb4A7S7nH-rNqqC4cMSjkLSNonnBuL1m5WLPrI-vS8dQ1xtd03HLZUEbxn5iuzZTkFUAad1oT8Vlc6MytMKGGZXE9EfgZTX_U_7jREchS9lyOxCa9xfHJF3nUU9LvFvMrPPloI4vHbnhXt-nr923ELP3hslXMB2Pd1LLWg6zLaNeABQrcmHrzzJvyTRvI6bZn9HNInLU-jXS7qwuL66XNLbXnFkZHn5v4p_u8qZeYluUWrPoKKopUQ1TkGHxjPNtNIuS4D5HKoTKZx1ZboKzlBRx1e55rjmVn5yoUe-9HLZ3K8xr8HoOJQ0DVbt4whVVfQ52ZO05xwT-s65GEKTvYyJbSdvHUhEH5b9j0tKBLkUKy_Dh6StHZH011RmciFti5MohLP_EU_nKPQIRv4Jz5uOAWHW3be3nUzloenNjbT9J9eyjqMdN8yQEZc1QinWAl-a_mpMfBKe-8htUFjksAqFEDp-OHNF1hOUpGs0VjXCAdB=w1632-h878",
    "https://lh3.googleusercontent.com/fife/AMPSemdf3qx_7Y2ZSkXqF6FEraaJ70eWrGg30_nzHhDvHJM9thbZKSX4U8uvOp7cQM4aiPInsoFU1B3rJBNEYl_0CGKSG-QDhDd5__ORBnditKRKYlGcCvzvnEGaxJKpeFeJ7WAN7NPQlmuEIEcoXBLLtw62STrU1C-qZJQqcO1amH9gtiEuCESIodhYKUXvtvhh7_fqqeVpCcLdDIeiJcPFZFeGHK66rHY3jzaQq8LSjgTamI0pjsNZZWjC02bxQNhryDyR8efecRhJZxXO5lFPgel2ZtcBoZ555dUgLjWZB4F-Yn6ZJyZ6ZuOVm19sQcyD1cLMd5qbLVyKCeGeGpADeRLbu91E8RqXRp9MFFuBUF8ED7_xr2XaNf4Cc74C4UQLOZnyuydPPUp6FdnfU4JNraIYnVJWO9kEbb5S_tuoRN96IqHTs8Klmt5iEvGJpaGllWdpd3-ubtC_xAtIZWnQ4st3Gm6BWYmF8EHuaYnNAqzC9AAre7PyEjwjoMDBoQWnWCSvl7fy8_LRNoy_1YPVDNvm2PS6lkUzYjSqMcoXiQeMkCU0ukJeKhz4xGcQi9ag_cFNvVG2cESZg2z_ICaL779YMv-1I5RbpWjQ50Oq1d-iDkNd49oProkmfYjA8O63B5vnVSW5pJN-qwIcsSrXp_AzjprhgXyq6PgDjO0izDqnX7XyXAKNbRSaUiVLW7yH2mu2hiEhaTMhcSw4PZ-gZrBzIUZLPQ3TijCksJc8RpgkkThCLJAMbbJ2ZviQiFPUJz80TghN-69OqXulsH4MlmVX-ijfRw3uAATI-Knv_r_CJicfSU-4VcLlRgJVvI6ZNspkwOZBRxdOXQ0dAjHGaZF7mZwgaZyTJ5MBAzvEzwbMO1c8aYDZ22BLznea0yS6UVExkNqZseJ8WokvlSzgRembuWmd3kd_tJRO2RyXHKVxVmje-4kqyCCp8Drw21TD6XokZimC0l158Hy9gAHR5zpdGP9R4Q4vxEt0i_NliTUx0KsWBzmJjdbQ4anmTVyYjh4Lu0Sw6IbZ5OQsBI5AxBOQK8rFwXJThyf0uT4oTYrXA6V476au_aas0gCq1d5xiN0rGH3PA9MND70izP4MI6_K5RvFo8dGswJP2Ce-PxD2DhqXjFDbW_KThWq39EETAXTcW5Y64FWmoBRvl269alg4fYyGXbO_Dr5_F3KfZLWGfonKJczO2_k07HfFYz4Sd7ZCGERxwZ7irLW1PCF88tlGmIoDBMlQ5iaGD5Blo08DRcE7guxT5-_dEMNVoILgbMhI_gZUeLLtkw2Wu4giyhqTfczrZy0VehOGSXgdmrkoL7_BXKzOLPEIh4svEAz06i-tvmrfNLOOIXL9TDSEiHT3tUhOQKbRiWbTyHgyYiPsZXDx0-AZI_sClrC_H5tz9Ps28YiJ1N0p1eOKFiQpRMokO4OfnrfJfB1Vt_f8sfFcrlhCXdVMHh1SYOTbtJkUqJD5KOtjeaFagP_V0liTrFVVHIVeQuxMyj1zjriIVsxeiroERRZai1XT=w1632-h878",
    "https://lh3.googleusercontent.com/fife/AMPSemdoZyuoSmraQibkoV2MR0OQJttq8eP3f_nHgTennAjJUwnHZ4gwErVtNsIhckzW2tWQGM-qfkiaYHUWV36wwtPX0Lj87fxusPcd-QGE3oKx2zsYqTzNAz97u5rCDpLdxnZTh4eAEhjCeTtFdqkZA0-MmSaP81RrDT7jVlJHuFAa_GDBHnx2E5gonix2Ypxrq9T50KdmET3MN52HTbXhKqO-OMZLhjmFbMdsBR1UVZL9fNWCwSzIh9Nd7DAx2-HN-g8ABwzIO7xFjSR26Ql3YX6BDlcfrtOquCCqus9MMj8Tjr02wyeNJaPkEnoMCo2YCC-_Z5p-spjglOJLZdR8Ugy_aPfttyJPm2XRbp9JNDPU4brhPwEwE_oYE4EOb0j-9HTL1cgTj_iqjxN_1RLarNCuAu3PSWQvW1YnLmfFN42bukVdQfxkHCFl9f5NbhHKJ_1GGpvqaznbFy4jy-OYshkBl3qS9Xg29WRTuX-E_M2NhQ82YPMQmrfgxvjKyJXbbcdNC4HDBSfWM974rM5RLzI-D02n9zz9FwKQRaqO-UxXBJV0e3fwFvTpP4ROr1ZTnvJPWb_xt9XfpFg67a2gITurh0ZG1ImfSMz_Kh7oR0xD14pJIy7S3quA1i3qT24fYE0wxfxQS3Cx2Ku3uNM3eX8l5TFGVJtEj5zCrnumDESkysA1waCddAsfOJEws_HHA0x1ubfG_IgKuAyziQE94r88sVRl-wWsvnC9eYawD_tqXyAmwEbFjhwvlwIPfy_cWzXnjSRAKs-owxjSsk_uj6syO69y4yFvH49tCrjvEe4GIbtVEkMY02CEXGcJ1cUEvjrIPFA3MTsKxhs1xK2-eRGD9CH3Bc5_RwNBoDZDQClZRTrqEgIKwH23V6Cct1p5cu8CZnezKF3OSEOWAd0P9cc-5o5bBsk36nUeKdrGDBo_tLydJ2Drv9Jr3eE8o98LV_VN2rzFYGTtdFKwBIuYovPmSsrtoyZxOzjlgsg_wEPHS5t1Hgzf8oLC2mcJ-cDH1bPzw7A1WTFnOxSmjKS8ahYXnuzHmbJUFVO7EeuQiMu6fWHhBTPqK52HEnZTx8x5QS3Awf9Glv87fsZlV5Lo-54ahS4mK1GBwAgmrIsYxraGd2VjfXAyWppqER8cW8dDyqPnqcLVcSH1mY1S14m8xXzYC7v4Np4TB5amgXgF5IpJvflyuBz_6JlYBvrae9tWoiuNRmo1SvoJS83zBbiDJgNS_p3tzJmKhHB_FbzhtmjsQU-LixbILx3kj7G6ysOCebTNABFfI-DS-ETndPDEEftxOx4cUVhMiIXNt4oGk6ZC_Rn3kWg9ZQh8LFVkg6hPeOJtUPBQAOUd3KBSFatFo7LqIKQdmY-hXWotDmO0W_xDI6fAXhAe80C2RkSLCu9hcKH3tETfWXtKadz0VoZq6KI08GxPiTFwQUEeedgvXll7VH-rjkrTTz0b2dA-hnk0pifpPoeWkE4Kb6wu3Xc9kaIMNlYLrhxPIFf9zNhAAxWXJ4Ufsy7HPMCU=w1632-h878",
   
#будут больше гиф, но позже
]


dont_have_in_base_gif = [
    "https://lh3.googleusercontent.com/fife/AMPSeme6fvC0L-eGqTene50X4jL8UmoqDJerzTzPN4Rjo-Na_rVVRN0P7O0QBLYCKsZWE3-DEMI6sviBs76aCH8aeiJeQCfpqXwuWfKihfVXJ6kOY08evp227YOVjhmYC0ttEP3BCQ2WI1DddlM39clir8iIr3kYdz8LIFXsaxX0zHOzSAKA_8H2k6bL8-CNiXAYl0mloMexEgqtJwoY3KzUIhqQgoISjORQvSn87mDeIrhSN-JTq2KL5NrJIE7otZCY1Ije_zy8RpYzo4RcWdASDd0TbmA_tJBiu1SZtWUW7xX22QwEAG0wm5YFqv7LHj2c6HWXQpyZCrCSw1VqqgQZzY4ukOOTfBVPduQ2O7m_AsOTlPTOmJZSPIvQs6_OquLQ0VrEOFofRQmebzfgalxTMgL2Ylcc-AF6Fhx7VPfGsKj09KMRwRU9ofvADThuOBMoAaxLlncWYGHJj7S1tQT3GVERVGMuF21zf7fsJCugJczxrV258Inl8I2FbU0MTpdcGQHz16CsYPhdTZwuNYMGH55y4xSEbcE888fPRUTzq5A372BRkK-NFOOoF03wTpzIZkk2Rf8dFKy9ytunbR_gvorpIbhHLpmbsEwQGL-OJ-WIGvZh7ZqDFEMbN_Nfh0oDhj1qTZT_SH8OKaoHMnXXLu5Zve7oE7clSi20AfkQ1LZSH_612jSp5djN0kFnyhZw_DsSHALQkw6BR9EOKZ7TeeZ2Y6kZi5IG6DJJKyxVunfe-b7AJ-Qts6RDPPsoU_R_fNtQsaMkGGQIrd-yOzPq-ulsDZ_GkR5a3FheHHYChypCELC_icq4T19POxF62SF2fZI4b_L9yho1HYj9MT1ZsUaNZinU0kAEZQrKh2P9Ig2MCWceAhlqRwVA3g1T3r5mOh3Eb823g1TB4dQRK4BpcOvNIjlqAp38qFuT3AKHccr6kMTbrI14C6RmgJvCs_kCatyJW4AY2GAcsmqIdwY6tmNRQXVnIrnyb9KQzzaZHtoTf_wl2iu-69LZ-VVHZ9Xpnw7F08B9Kae7zWNX159UivmOIe2inOluLzJVnwxi6m3RUrUkcdNxOGGYb9ovnfYJ-FAMLab3Pb4C8-2PQnNBdoTjghvJzh73C5fPp6Ngz2sta_ENczKp3oYMkDFdJt2LNRo8erkyXJfbFRXlhkrrspUOjSTx73IfKNoR4n3RpxwiLmGn4Rz8UW-8pTxZmfJ0x40LzfNILXYnxy2uGUtcUDWeRBQJowooDKO4sAw4FtYxyxjRnb_kJ3Yde1kukGBxze9JV_GQQ7gk5hMMhUx7VOzTLzjGNHFl1FHJ-IE0Rg_7hfhkFdw9v7iUFOVTROW25m_awBS8-GHlVsrsVAZimJx1Uf7npyTP2qjiaQafGNRQPWcN6DVtuLpXWutpSqjZTp0xKtGZtlPKKFaj13jxvrgG1SqEDbvxSj8v3GP_EtFRKKW5TuOU0wKxNtXKsP27CMIl25XRialED7qHOvAYma7s5QOprJzwTawACSdPvLBPUPYd-tVCL5Eh=w1632-h878",
    "https://lh3.googleusercontent.com/fife/AMPSemf9CSCWBU6c2lGdw-CxTpt19jKWKjLxr-UVD1OKRrHCmtiIxDuKY6UItcjSg8LyNRUJ-qlsnfQKE_Xrmf0J36XvsOUtru_1xJzCGYaaIOPVO0R_OldZ56h8mk68FFU0qryZpV1KXg5DulmxC3Jv-nm6lPL8TJuqYWP9gt4S6GJttj4WgMVzWkDerWb-uH2PvMMk01QfBdlrc-OlAU-HG1ucw-KcPeEXUfghfZoGQwYBqS_SNnh5UBNFruGSGmuph88PUTLmdoi-axFv56f_wtKbljl7OiO8RPPtVsBEc_4sfrQvAVuIIyXxggrnxWjUjhCQH-kVUQEI2eM99aTsQWZJm7rZKcCWykeWJXsPFS3U0MD0WXXq1_9mdC_RB0b5bnEL8dKZKd9g-DbwURXr214yABGd5VC0qcNdraVAoGMqY8R-Lu8NfnvR5R7BmKxP_0ykY5FMyiiNJuz1rH6pZP46s_rdq9hLeo4Bp6EMmvWXC_LEgYYj4sgXfVcws9RaTU-A4c_A70rex3GtmMAI3908v7YMNX-YEJR8dnW6OhB8M6RCmYQ-MRznYtUOMrjt_N6gO7rvKCO5vE8zFOQ6KWWvPsQ54L1hdgxPeJisXm2eMlkHMqdVv093llFdDx_yzzQLrjPquKKIk8Q_hJjH1AlfyZbNC78EgxR7hHrs54dqd6FQQP1jrN7RF1RtpDLTqdhGuu70QtGs4h-8JfJFI5R4o8dzg6pYSXZrjnOD8XosKT8dxl4GStlh2GjpCqjDif6OJwuEM3eX0PAWVi6Hw1x2_lofwPLrjHs-qRHP3_VoPPE2bS_9nD-qnRJlVNlBhfpfYlqiQapLCJTfNMJYDDJan9IEo3yWpXMaegiiWdBcxhuZ-bQDWvd0QvUj9GpOVDep50pWJE4z6C9YwDW0skhsX-aVphoW0EtlIloxGfEd1EEi_YZlphim7NItGcVG-4Y3On2Jx3rHjGX3fNBo-XuSpHM1NXY0bTyCWjf7l7Y4HsyPc1CDZrQ--dX4dYejQgTsha29DjajZMGgLTrtqDHZYfcf0nHPXTshm4HnM2LiH-y0Ic7RE0S7dD6Eg9aUhYbfKNp9zdM3QBUIicAvPM04FxYgRFCRY2AUSXkZ_qH0FSp6unVF0Wow3CNkNkTm-flI-YTjDrOYVuafhoPd4_PQanXvG1Hdap4zvku4CBvSZS6ga3ywWo2WbDNC_VTNJQX_HI5QNbxPwjH0v-G_m9THbJm6LmX34PP4-yL9ZVZzgf3bQUntJ7dx5Z4CbwjVVv79OR85pD-6iGCBo7NIlsS8mAe_L2yejJvfZdq8i6anYBnlR1LCeXRcdPJaOWJ6-1jGgdWEKm8t7PLAKnFmd20Fn6GT9gksPxh5xxTEcRJGe88AqKxtbRWbWcSIYiqxj7Vg99WXKsPYJjFcwDPKO9MXhmQgoS-EqFOMbZGi9MsjDujImD1l30S03-lL0ZX6IG3VlAFWMMtPrYR0k9BfrbovImPHdfiGt8zijlV99sA7IPUNGxLRKnEi=w1632-h878",
    "https://lh3.googleusercontent.com/fife/AMPSemfgKJ_uxEQOOTDoz8NoKrBqk7NzjbbrBE2TQi185r41J5_KfEPg0iJC3eWIC94bYAVVsMcH3CBuUGt3hBMe7lpPO3OSgNLr1WHYQ5Zf7LYKCPd2JX2wTgwHM0mW9CNQjM5cP5WlpQkYQkPA0b1bn327PV9CwnDGSDP3pvDc3IRrt9ieCRFkFBg4pXTncoDsgRYA_CVPd4SGv4zmJz3nt1YerTYF4zY0tgeYSSvUsWjEIliKX4XtKVbLrNDVxlU3ktWKILclwcYBPl5XAalXovcVUG9GOLV33MM3KDrH_-5p4_M3nAmtJLsrd3ToWrs3LAG-Krxz9p9z0HNaY4wZp6VO0r_Mo44jczQC-bd1RaVdL-fKtWNG4ioagQl6t5sRh5oOhUPIgPxpGG3BnG_cYbIVeHF-qaKqGNzLnqX9agaWokHy11wF2Dog8WLLk5W3YlmwS-2cKbeuoEQGc4jnAAqc3YUrZDbiF-U7qHrMxNm7ehexXbMuMckz4POcNwPrRWz33uGfJjHlHB_TZAEacwmGYawrEV1I-QJdcFFkgwVOGqgoJ0ld8dIpvhoLz1SSI8GwWWgq89XOqFg6OUAyj_SbBnhrX3DtZRmjNmN701NnwAdDWgM-eq6sne1pHVBNc8u4g_IK3WU78pWXvzMqcaGUTVTIQ7ffNQB6D-Vn0SOJeamkt6AU-MVvb4pPp--gGmRX_0g51FBDl7tUhaqF0IrDp4ZdtYJtDPUNAkiu8USqYJH_ouBWM-VVj5EY5Zy9C7KjfZp7Ao6YXrUpDWOs-pGB-9YL-Sx2sUGufa1CxJ4oFYQ45XngvJQW_dMMYx2BgsouD06QdHHrB29VtsNWcv47mWIHyyV3rz58kuhUPM57sAqtFbcYSK2XQCYs9toC4PTK2QhEENZ0c-Zt8h4rA7wbzN369hnhChC85zXSKzeHDP9LLO0IRue7SHSUqBPwApJXCpzA1h3dYMJNwg4N7n1Ja7OI0_02FTS6mYfPOo07mpRx2cAYvTlPxYKnWwRxDKycbVFcKxVx3NhwMy_DJo0YS24maMv5I0sBxlhCH9hq13xewwV6FVeQctGociXY-Um5-eHALD1A3ivYlgs5sIQXfg9SpvXBtIw_hLxd8_eAFpzx9_zwQCXGq8W1JPx6VmdIArajP2yL4Dd70maF2ZqrvW353Ifn1on-WiJo2s3IT157I9SGwpBSCPut0PMo0qwboYliDnVWAJCXNC2IbUZcjW1ZKhS3o0oFGT4aEsETLx4n2UoxpiYIuqzIL0tQEeOv0iI0L6oh8SEIT1-Lo2EW5ZQ_1Uw5Cqc1L7wEyLwYfMIc8g8hwVpVTKTkGF5f5ITa0mcXD8AogH5eKB9BC6c0IG6rvLuHl-TSB5yi_y7zrZsFkA4ejpVKBAPc_4hSOP_8YLGKsPkNf9i128Te6X6y9fyNt7ifXfMhkJEQsd30TVUqKUclVR-6OUYuRe9whqz8PXvOQz2sH7ZUGfbATUcgHoS3drx4O8tI1IdUYl8AYldWwT_LgFoZ=w1632-h878",
    "https://lh3.googleusercontent.com/fife/AMPSemfFKLKmbn81bLZuMBVM6P7ohSQXYSZODV9k8AwFUvPjOc6YmMgZejzxoFvOPYVx4k2A4XdTbxB7v-JhHr5zjngL7CQYAPKY3s1liDo7voqKS2OcqcqbhAucsq8GEC3tOMqMMivI3G95rqDIgF9nysZcl2evaDzzcPNXgde0Oq_PtO0D7ICwq9DF0i6Oksvru5CgqfR2Hbjpd_6rPvVg9uXWI8ItZ6hoQuZoo-Adgwmg_TGQC_DZED9LD5vGLU0LFKDp9XWKX20svn0F-908LigTBgoBRJATAEGxc6ikfBw7R2o6EIzHXRMQfSqc3Yv6DHxGor9SeF-vziESl13RCyh4cEuh1FZUzjf-iwP_jHzy7bPnCoEY0qo7ymoMdbtcuC3yppnQTuBOlcra_iyEalbTPjvHRwQWL-JfOqxsihCnuP1JtEQfeVUXIwCZAGIqk2A7mW8Ljt8BPOn5-mRD4G3_dE23YXdv5falJkS-ean4WZK57HQCnZLOaN0WBSa6szCrLYy-hV2fMvw8pzlxV3-4moP4DE9e0mqfsjmzuOdJ4iUi7hV4ep1UTAl3_MtrJco-0qujIqziAUHwLASA4Pk0Bmn-sOv-0xmvBGMdrNC5iWKxnRLA9Szad-qyG-zxunrrfc1_IpzhfNKhtTgSi-7vb_LzJqu269VfAsLbEN2xP9KpD-A9aeQR1mWyovgXDfKxKwjMKEQJ-YblS73phnYIfFkCXj7Y1OmrY7JduLkUTeKLc4ASTxzJB8MZkSrs6OXMIrvuF887aSv9nuOpb1-v6Wuieg-WiU1FkBjOEZuoWZq0vODHwpT5-O1hMWurlg8gWS-UPkT6dnSKUGEWeuLfwCpxvBCeO0SYVb38Nl1trv0DMqKpb9czxwGdXxNKcKZL38zSG9imTpnOHY5jVkBYdYffQQmgQDjcKReAlQUWWXJ3a3kUsGHE8M1qPsU9FlvkAhceOpLIyqvKDAqIV3vL09-c0S2ogPZ2ss82_nHkvptRUlwvBUrWoNkH7ik9Tt8LI-ChclRejLihbW5O68p0cOQmPVuabgGXptF5-mS830T2NMCC305RFNrxKZvMUhJXZ1eiShevJyVhR9W59qH4llTrf9qzqCNJ9XuroV6VOiUJlAvHvPBrot2eK0eWG-ZMF_Wk4wC_s7FCLjeX5WTUsqX5LOkHAsHlqIEDlX-wY2ZcrrxMKLXonbS1D147WMhbbJsdGOXqVCAWdAmxPNa09MbA5NNFikeGzTrHMd9DQXinD-Ijj39rsLrz_sx8d9r9LGR8f4bD9Q2JW8LzA6TCPI4tLgcjTH1GhrZHeHMYgEymmltIb3J6N6VuTBbVaIsegOgF3XI6hwgZzljzMDpd3eK1cIdV11512sWiFz9X90g4plu2NLrXSmEdJCMB_DUwUaJgYVZ1onwjxbe6Fxg0TGlb4pGA7bz1PgXwhD09i3a3EyG561RNwKSHx6VUwFqCUINriyyOJx4CXgdB5hpVqccJLw780zkBRiZ79lls1OaN3a3BhICr=w1632-h878",
    "https://lh3.googleusercontent.com/fife/AMPSemePtKWg-pPhBwVrf0CRis012nJFQkF4C3ySUT_GMtHcrXFQXAnNgGCCGGxicN1PaVzYlhyRSSzg0BuWEw3et_D6OcwlvJdxw8it8ccsizOFFW7c_SLbwHC9ApS6mPGQ3D_4IcpS1GFt8KeM_Yje8Q4Q2DdRFmgRr8Sj0U8og01wSr2enu_ky1Q20ip2Is8xRmmmcMJKOqL_R3OpbochSJCKBdktXJ7Drxfyxc8BYqWVi5z7J7WXhYw6KAP0m9fo_4cSE4Migk_5vu1cZ--gPD8MvPObcbAHj1sqj1vb-hmn1AUPB3umGriheI2730J4YMxXdbS7kpyhdJHGV8UHnTzcDUJvVnwsvTiKRGE4ybsnDzEx4iSg57A57NNv0IfYh329KNRKlXE-Rv1rrRxAI70sYGD_A2Dt63zF84nwF__xrk37NzbZWsXm9G-Xcm9a6Nc_EKQc8VtzBG2pzPOWr0TqbKlCHdyvW5DWYgh1hKzuxpTNlvOTEHN9csK8zTq8h7xbNQb9qzbfYMrMUF82fXQIAEkiBHyBe3STT02eldHMQ0bW-NR4eysfcDMTBNzkjh4fvFvUzc9yXcytJqifUDVfIbzmCf50gys_JYvC1_VIAlS6k2DCDtjtSbTCuycDqcgewFGFcjGVfOE3ht5tkCAxVyCzi_tc82rjlVvhAbub_3hLiUCfahuC0lDbyInWGjUzLdV5I9ydw8Niyf_hmu8p_mm-hkyMEck5X7GJSnR0vSOw_M6R0VxuMwsykGKyaeyTbHEO0fVcFxSPKytaO9VAN4sZx7cMcU3S_mAN5cG95IEJyOiMZNeyu41Li0qvPvdsMxFq54KhiK81XxTA6hyRMSfhdatKEyfyDc9NU4Yb4pOGEm7XCfW6bE-fEu-57hSBXkKYSIzTAjAncShnN5jCtJ31JAQn-62lQ58EIzE0RnLOGUdRXTrUlt6hnOIeETbcRHHSdcGjF3bWYgdxyMk2BoORA_QCmNLFg1_uKnpsSMK2R4sU_yxH-wFaL6cw2NpG-NOl38k5MIUNrNarfz0nj_onthwxDhp4YcGvHtoxjQcoqhDH_jVp4g0njNqiYz9tW0owWY4xcKkyJccmpuWQmB2YHZ1Hag0M9LTDq_OQfD8RO-VQRnA4OrKLOvdlyCkgMY16_dBdsDMDum_PS5TROsTwgEY4blATTvY4z2a72YjgGifE2djjWDPDCe-B3gtu6ZGoVY_YcSS3fMdieuXvSAmTmIUOH_1VFPKrAVW90nJzU3zt8LYWThrjF3grXhbXctTMuI9BM2VCjIQITWNYcykdddTXaUwS1w1IJpXyKNC_5idzLd65RrF0cJtCVZ-xrxCEg8QordMg9HyJte6TtXrLlRVoze6WVDW6nlwbZ1lkNypfYMVAIUmJxwjhYZ6vmq8AKDu8gcNmJ07Ahu22Br584llJ-JYtgN0VBDh5aLovb_DpeDkyh13NULi_HrZhTOtpU7523axlhqhQ5dRvdjHYEyzfwqaYIvz18jkAz-e0ebO29U1n=w1632-h878",
    "https://lh3.googleusercontent.com/fife/AMPSemfYaFN30ZK0hmJxWoh_81lrGIC2ROshmTsS9TwvtjoA2C_tDPUl7Y35OkrJXPz6-hNX0EYkE4849PjnN2Cwq74PgX2TkIROTuOx2NqQ3muRg_kTcdTNshAJt7ziHPwuci4V_abc5GXd12vTzFl9aVoIWUYbmFCOgnz5NgPaAazXzgszTDhbKU55mPt12HLofJpIrtAzKkZDCFK3kyukke2n6EsOmsnTjDdZL6dNXJYXpHP_RUC752nOMEyq6q6sxkoEZhrIcaBrWmQeETaDDBJkN_AZv7zsrd0gCV8WeeIIBXhpBXwwMAYvtP2_QSevxemVkDsJDMEs51v0sl3wETmc0E0ZQeWC7AWhsolrcpqOPRCJf5LR9R8zLxTrxZxAi4AEjSb3lAnHOXKPcJIrJmwVziD-sY3caAHQCkLgo8X1w9qEuyAc3HDiXrC4FpZBb80CvrDS7qU8cOL-Hs2RYgD7Ieuzd_RSlDW9vFqj0TT81oxe_BdCpa_1ujhmYigUxx4suUFT14dLfPnvWU2HVDD4DJBCQGP_RAoJUiBFePs3yle0EVAZLh8yRNtowCGxTZ6aGwjkglvyfY5teG5phYUzXATQKMZPeAh33hFcDZF_OUUcc7b2amY1rrSbLGiinP4UvOtFAocVHezodi8c841DtxiUgnJ2DpidoYu_u-cTADicziLmuX0gvIL50n41BQ0BpWUoBBpoX1TUsivEO6s190ro0gtp8E6dyHGjta0Kc-WKq5fAlxP-immyzK6v20F5wMEs1-qSCBt5qscgCsm5swPU6dWJvTejuz6KR6It_UZnASKNrxB7s1cEqKc5srWu7iczYlH-Hlrx8anS4hKgdsPdgbO7ZGO_BvD7I8ONmgdlQ_hCgl8_uVDcqQBXptfDOjeooYmF7ERLDmu_6n7ylou-HZwT3uKKMyDZyR7TWx1eUGn4UZvEHuwnRpg1GVzyHxma3-_hz1f9amUkAk5GmpSL-JMgrTjIq78WfmHVdqEDlTQpnmnQbJ16FgAJ5US_oAZlTVbZFfm6qkfB3IoYWUCjuK9DldLpSaRhwICcBLgLtMzXhKsMEW5N2Z_ikD0l391_8uz2VeVyvsTXvmwKke1i-tzN1WB6J3qXcOMwnCnlocfGYCgvMqfGGCA9yijXr7KD_0yK5FrQM7PvGYRUfLuFHFn42eftUO-JvoB5zvddbI9TVws-P5gDxtO49jroxZ5liO2nuoCZMzwoW5-X_5shQzsFfG-wRcOCIpNv6eduPaxtlc-MvNzbL7BAp4fa3m0jNk0N_UrMBB3CpdTJEoEnxI9PASDLg08F-hcmHCloifkjHw-wISxKuDfO9GQEUAgRXmqQWJQ5SOcoUnKExrL2X0ayngN10cD7iH_X1uad0oxMlYm0j0NfACkBZ8oJDifX90Fdpy7_VrlUTwTLeKRkjTy_26DwFlMsA0UkEqROhmHvm2cSyJrimtOr2qPY90sdUPVJj0zCLyZGsANdv4o7Fd6VFmil4YTCq3VEp__jZum6JJSn=w1632-h878",
    "https://lh3.googleusercontent.com/fife/AMPSemfdGkI5TCX8p8b3F96Z3kOpSWCXVHNMqDTB4mSf_mAwmACheUGy9p5FRvBc-Vi4C_uJ-bw6GKKscsInG3mCcbGFLBu2uuOQARWIDu0Hzc_RkoVA1laDpP_dhDnNR8GlbbsmirdvzjNgbpXPDbgTLjQCEy2IaqAneWp5xriMCSzs9_-pPiUPdQYP512krRyLHF_88UvlmQM_n2XcGc06NooHIUvozZLFctr9D2_luLdnMeBRa8C8VSPeugMy14xt3SdjJ8FCU72Aa-CEFGE6r7NXM4PpEORdAlpYwypA7Dxp-DDUzX4c7AblIbxxvbzzmecFagvNsr3uO1O5tpCb3M-x3fQF2Td6q0Lp23CKTMh2r7eIUPAKC6unv51K0AXf8_HEm5ETTOFt_lNy0Sdh-ShUDAP7OY3sQYDOlzjVwEbhujcrkkfA4cZ-UNqQsfjxkdgnYalE7Yj5d1pgKqpRtFPiSxYslDfTcRZIdS4N0buJrBlw0k0FPTygzaLBKfqGkAorSTdDgkbS_TlGS7eyNclqeBme-4is-6KfX5JFkxMmzc2gbm2CL4wXq0HXmoNxmGHx_iM-KmYov3iQaBSNH2hey4IJFKVmJLe5DDcVOWoMKYllBjduGAUQWZLYZx6zSRMUdhfXf8vjhL-MkPFuehiFcvVZ82A6mBD0p9aSrwlC6rD0mSqA-YJIBH4Zy1xQojOqzhMtwYy02lB4jifGY9aKkz94qUvbaZO-r-Oj9WtngNOjfjSQ4SEnf6NkxYp-UL_KpRkQ8Xv2zirj83alnd1tam3nquaVwQ_NazV9SBk2KssdMz545e5Y1bzeaW2E-eK53r31a0HQKCQ1JCMLVmvsFnV4i6XmXoe2ZIZPWjurCaA3DrxH8IFnTiOVopa4A-0LalVqBswByjfJNczEuB09bord1JdWuThmZvQ61CHOJsQ72d0OQQTtRPDNJBUy3Df1M-_kzA-gorNjeZBU9foZuLFNhuzo6AjHwvWDQUokAtV5F7FBVKqTHch7cUcCCnOnJbZkdOygOwuGioKSMdmHvZwExq16Nap-J6_RtFGjiwb5xS9rxCptBBLIgllUDO4ZdBPzu8gugQ2I1plFaKmk47fhq4O73dwK00m3-FFoML05yDbqKSQt-fvbV90xkPyT5CJKM0cDwQy81sBrU__ZT7vuFG1uRszywTYuCB2wvKdFkyte5PgoDn-rbdzl18Pfz2UMExIqn8Fwj6yrz-tov8x8PNZh1R-Cc0-3ax5fSlW2FD1fwffgQWoD5JX9ge8q_ZEhcadWzmziODx1G6q3NRlYcoHpH408oBwHOtYuCFlFFWHVwbK77lnj42RlzvbTqNs9WYDKUyyEFgy8jZwCSxt2Nhx1JKVjPt6meYzCaiAesYSAnNctm_Fhf-Jpsbs2L0MbDoEGOI49ViJZ0mJvq3xhF7dneqEOkNLVGsWc7sR_2Lv7V7eOfdQVGM_cAQ9fiMun93aQQppfVvhnVCRDsokF3gPr3KuFBpqWxkyl9a9tRhBSz5dL=w1632-h878",
    "https://lh3.googleusercontent.com/fife/AMPSeme_SUBRt4_cV7JoqWmFtGS080n3MTsbvCkUFmPFyTND-yJhppIPaMIkFgD_Y4Z0krRgaSB6e9gQCRaltawdJwknOWv1-0CdvkMmFvm7IV-4YPHW8i8FwnRp0HMcQSH5oXAe5gmFXX8yDljbyDQ0Wx-rRLzR4e5fuCb_DwD2V8vSE-7-Ccfyq9GsTuASYffpPIDBm0scBSjSSClYf_Z_DU8AgFK8hk-oA1nEL1s90VBfreva35u8BtPpFkI7A6PyXAl65-pyEAjLGGCuOXhPYjTir3R6iujPvN842G9bpBzP6Wj0-FAcfs6CxkiImqFAcU1XssP21wnzFxuojvnIQjDZE5fK7zA37PfMhGpAFJr1N6reycpdKRxNp2wwubZjEF3kMCk6QijlYsBkV9rSXRgI9RyA3L7es-QAudhR1-wDPu4xlZ3nn1NI4sLYijMqgAGloSbUb2zREts-14nwffsUxhKSZkRh5pYq9i_HmFBo7X0JPBUwb1vRGJvW7mTDwe38Wm8FtFPDezhpNMeba1I65THGVD7PCblrb6GMxWiQ-fcA_4rsqvyo3DRJa1Gf6wN-Mk0qITlizZzxmXS8K2Jn9jx_pZX-v8IALWylFV5Zfc7cYLTRwFimSlScHzk9EIa8EvJyxIXXC24cdFHKXPfVjE1CwOU0unflgIdLcS7PRwyYTNhDUdayl30YRcHOPmn6UztooyC8wZuCKoHTyeEkAl6CXh3HrMLaxqrs_zEWjxp3qvYYIVKFAcZ34tGHAeTWiXPykl50QtfhMlmPwKvr4fLIp4Rf62FLBtAa_FyuVf8M6tOipo8ZkYqqGMsxYbyxVRsO5AVmYfl_omw-DqiBip-peAz-H_XBvkGrY6oHop6e5tRwZUGC9MuMXGxOcFnTpL4nEM6zcuRWmh7dicUmoPIASsyjN_c7cnMwcllUvtUvQ9lnn_5rLFzp6VDxJpB5upWcem3bCH7IynLEBU_n2IjFShH23FfVE2u6Hb4mII-VkQ_AWtQCChE8ylJzXHFwmjqL2T7kR2likorQoGPAdjy6Izvw-YzdWUAwczqcprrsfvYd93O2f9DyP4WMeZF8PlhzhsEKGyGf1UjONXCXoLsGrJPnM-Fku-pVBM3ZBE_q5Qg53XgH1bqDdSVppM6zln6hC9d4DBqElf8Uz3k3_0rnK-sFffHTvGVvX2Jk9FUH0jQlpw58EWd7j2970M5p9woYU7Re85beiLzP04VHRle4lgXJMYW63XVn_lxLyyY1Jp9a6kuxrBVsuXaYmbVQqkrHYtfnL1zbOh1nf4wowlUiYPcH0RO2uYNV5XR8KFE8hf1B2e9wByFZR90DHVKEknGRrRsQuB1hsSDzA8WIZY4lu2-NwQlCrkSYvc3O6cu3oC4ATsVJykIgCp1NCsbgZf_PE_JLyXdN-CoQUumB7XBtQnR_uWRNQiMZqwUEuN8w7S_xml6LVJP9NUpYCDLkmWuS-SOAAcS81Ti8Z2QoeZYrE2gLSlDem7kzwBWkfOZk4cWmOL53=w1632-h878",

#будут больше гиф, но позже
]


have_in_base_gif = [
    "https://lh3.googleusercontent.com/fife/AMPSemcO8O1PJbm-MubxTqTSdLYpJslyeVE8Wb8Nuy4FZ4ZUFm1dR8W8AZKHPcwO7-c9i-OPGlRdiWsN-EtUOzH1Ptfbwu02_IwZiP7uf7q_HaE83KmGZWZd_OyFINAEIhmf5LClhBVF6cayX9pHxlII53-mQq5ovkyl96AyoQgaoxOZM3k3P_dAOwfYYo-iu57mIo03jAv9cftB18ILK-Uq7tEylE2OWWxlw0MNHMJDDNo7k2-rxWyzI77XZdyx3ayWuzQCQvFVKB0TxjwOaNNFpSNArlv5-hLzW0EQLD5B-Mw5m4gRpHkA1dvPU5y5zrgc6eE_khIjdPim7CdPLhsvqWIJqKZGkfkUrsU2kPDVKqitPiuu41q6ffP3fJh1_afe5SFb2WY9g42g9v415wH86-ygeLpUtB6YyO-pvtdm7FJL_xPiuJTBAIn-jvVHjAOgS7kJhoUaPT4ZTTT2cQfKoc9UHGayRIvMa2Td4SPBgL0pCsgFNRaleKq2ncLkTBWmA89so46OXdcqgQEzsiB8vfoJhHEWAMCCR8B9SdJzZte2cUx004YhOovryQR-vttMiaUmLsPcb8fBFF70NhaBXO5oTkdL2YJZn5gwIK4wZwQJ5LNrhxSEukPyBe0hBjRk5Iu9uhViUIXSxovz3pw2jy5ufl6FZFmkrY1cqAShDrYvjtXlOvQK4bx-vTTjeGjMMDZwlv5hNKJGL3flHaQLgYh0V-38js3QTnMwRanv8R36ZEXqihOe2KI2Cj6j40qe1nA9Ghzo-ZSmZZ-MO1bsO19FXd6GaxWbkgrjQdSeEFCO2dajeyRjNAfD2gITCLhTw6MeL0JUMNryGKH2Ezzd40xaTP2u09IpSYAk92BWJ3whnejoEIoJDXlAlfk97xPGXm8sAFlgvnf1ipLCd9YytMJ0Ci627jCZcJUUAT1qi2EIVbvYlPZOyWBZDjexcKm7xDRQl9DfRP18equSrHzeEYCCTyhhoFyJBHK023CUjdB8BZA1ggVeYLXyz-39TVh38fgHS2DVSl5av_8t5OkudIQ3i1NqsVsD0upr0tVth9alUUWC6vhiWijbQNAYboDNYDkl3cO9Dsd7xMu2SoiheKQ2vcQ04j-KArRATAgu06gxs2pkaygxVi_LWky62oeawKJo_CMyRelx9cs51GOZ9Bf2eKYLyio5CW-zl4P2bDmSDl7Jx_sRZBykLYwqlwiL45BBjMg95klA3bElDjIlAqqxNPYW81Zrpcm2dVRo3ncPL9R7BHFfLBFigxPTRIKDQ-vHGSngJWr27VkR4tWfnl1379XEqHELBPvik3m6LiTmX4sHozfn6_pM_E_Q01rNqV3sVMLilobzZJv6QxlgA9ompjq0kLETAn4vIMR6tiKhHCi3KE9bT97mkrm5CdrTLKBt8oLeoFNAhmW2CRXZh7VmAhmpjmvSzkj_Beo4PHGFIuXMNv77Dnvr7QF7uvjqUAdk1WQvnqAdL08Oz7yU9AZISSjJoPrbPO7Rqr3MVAprcXglvmcXY7bI=w1632-h878",
    "https://lh3.googleusercontent.com/fife/AMPSemcVxqVaF4N-VjsQSeK5M1cMnzaf9u4PgPlRx3Ut-xRKizSW2Go9CGTY6nIL3I1Tsyib6hfCBVjJrKBms79yZanCqL5RJvC6ypKfy8m_zUHHJlKwpRQPkrMhoP3lmpyGM3FXvKsPY7WlAEwQ-Oyyi0GhazdhcEkVrP3NuwHv4i_m2yEpmvCMWQ9oRf_X5vsgqD0zDZtO-dmK0ndsz9Amez5XmQd1A0wRcelE3CPQ_lGdlHu90n7bhMn36QkyASnVempcEgMDs--6zAB3Z9CrnosVSYShMctVlI1EMyu71ZmWZ0OcltAoxnW1_jOPeEjt8tvefVY3XR7nyY90oG4673jkXhFOEWTjTZDne9GjK3-lsBiW2utS3HHC0MRODb0ydWkh8pLf0Fe7spsO3-EfYApBf6DPGsEmEc0977Vg45h5_vwKQAUhYCsBwnwT6l7CC1yDBB2aSpi_ruNdOaqzdwl9ki0XcDGaS-IEkJfOthVSQ4YHayC8jm4zTg-XtexymL8sioIAnZrXzaWEWT4KIgk09QtnRdOykALmtSsvBdom9MWK9DLQMkmNcHzC34TGxIe5cYsgRnOHhpmMYM2tgEDtb29NvuRXpafP67tVt3mHLi8JSQ3j9pl21kzeflXCjfdkArnSWeJbK8_a4L2ex5LxWmiUj2B-cWSuQhCjN0TR8M3VZ8C1i7rW41TixpZ3wSz9BT_4_7__4vRHzrsGf8d5TTZtmWVlUMinCIWtRhSNe8NZurh0wX3VT3Pol0ZQZXxghGw1woETwVPvZ1bPgQy5uo70LVZaheDMu8OkmUoUin_75mhfHH-NEo8infPWsn3qUE__tl_BgrQqyI5C5_hd99tsOz53cfR_Bl4eq-sysnKjVvRZIb9WG3AUUda2En0gn_hmqZNMCvB89o0E-arcSuiilS-bZ1rRjlR8Akud_K4QjINt66R_5FKDj26ZmiymAGlHJ3zQbjqFP712ACGXBzF982OTEmeh6iFub9hJp7huZR9ndlbvrxTwiDf4o0z-k70bSLVFgELePAYyzBvbpIxaOsYYf7jViQPxy5hBwrS5F1HGBnyq5kduqU4CyHlCN7DbM1GpKD2aLpISsy6fgzZmP7qkVg7Wxd5S4z7REV9Usq6rlSEAL_3W5wSJd3kKERBKptBiVUjnkWxEIDxA1eoZO-ptkzcbHPLSSol6nw4EA65hbCpFkXn1JWHDwdttRW4O0eXHAdZhl6xtQr2qaPQq84cSmM99_G4xaPqXu03tZs-WHPTtPROvqPTxAYF1FY3dhuLPMCEDF3hr051tZLDRbo2DWqa7SvY_xK4IRjx3XT77Dg3GQVCnzxXgvmXbuMDTGPxwOIs2eob4kCzfO9DM-5ld1JIHxlmRzLcA39sjBFAYQzR6t9ZBQeozx2DJ2RibFfshKLjhjwtILvwFC_beHdnva1CnSNv3-7NNh3yQqwV_Fkf0lw09J_pGODqGosdWfhPZgQt4Y6qMxHYGQ4coUHd_2ExAGrHw2Wy5GDJC_Lg6Nwz8=w1632-h878",
    "https://lh3.googleusercontent.com/fife/AMPSemePLkDOXHidifUNRCNNKwjJxDhAqu4LShza3N2B7HichFFtG8qkse3W1qkPrxIfn1JcEmAmZTSz3IgW_XiJr7Cqi1XSN1tXhmLJ62bdUzwxfsAunDgSh6B9pZTtjvKh6AM9BBj5YgIJNPOQNB74Y_eOppAj4VrJTMkdHzRyKqmNp5rv2h6SlD7PcbSQYB2stJJA7xX5CoJE0u2OHzN907oP9KKGbytWFzqOltmX8sGpwf7CdUu7LMLz2FFpPrS4VkXboblD98VObqK9PLbU8hRCp1Zkvhi-ql25CTYNh7SWmsEoT392DNVzZtDEMluorYbJOc63OmiWr0fPHMpb66DZto2sGxxx_VCbUmba_xwLORf1WYWZXg3t8JbN8TbZkSry4RreZM1nrAS7nKBwBPpnTBfu2ui8YZmalCvR423jdGlzv_AJZAWJJqKGFj347fZiuh0698CJ9wNJJSoQERQcpPnXq1lqQfnyJML6njyIFpdHgUvfAmIlu0ASfDdt5chTj-C97_DQ2kw4JYug-YvY37EBX92sI8nGsvj6Ysnn4xBVcwsIjIAn30OX6P4GUSjGNaZXVgH47NoFVSfgC-zPK5gkpyX1pZYQN0I6cBOl8o8jHOtNjLAE3WkP9w4odSLlqRaAkrMGF7KPCQ-gOWjwEr8jpd6ft5jTOZC-1eCJfsgIrv7R0cowdktm_uVSrdLZBt3IHKhmAPapl_T5BBZ9Jq8aRrm8gteX1A3WVKKU_TNhSBwZbqmDHN3HRlXq5UdXpQccNjxg2IbIkqW_ot288DM40bQUhX3FMIudEwjDWf-xN6s_DVDR9YnKT980QZZPCSRah3VeJ95n6iYhp6oK6Wxm-rV__9iYBeHaIigCQWhm1hukp_xLmrY1dUzKceYcxQMGkEIMU6e4wW2hwbdhb_PJd1DF8xjRQqpiJVlUvmEEm7oaNud41Rjgu2mHvkPnOKphYDffKEq40jRCZGKyN7UvONRFrM4n9II4FTwYxq2CvYDJDCSR8H60LTYXElxP-zBBU3E-7_cDvL3pt1i95kfG4azMYdBhzE7ttHf9oO6WyRq_0P-vnmVx2fzTFN-wKCMAzdLTkxp5QMzCYqkettnJo2poBF_ItAKY_ogDk_L5K3FieF5vZshqQ_JsNB7XUOrAOvzmHXXMtpo0R8MKqn56FHuMCb3V_TDUfXcrZZg7096x7b6hjwhUhDSjgregSZ98g34aUYOyumGtasXuWHylILzY1jGeKfgyP1xTKbRFYAH-jf3dewogXihHfkaIVkZnzA7_P-Na6WWBWxoZR6uLj7uzp6l6B3T3em-CILKDGvZtNPNE2HOmZj3ZrkMt9hSoERhqgs36hCJgG_4nazaQ02fMs42D0008nCsBvGXlzUsSAU5vRlcCL4xI3KTtL1COysbmFIWO8JHl8pbq8FS9_nyhMhpKzEliS-JhRUwE2q4PwT8yoEMOAYYPZOEQlybq_dG1I1_DLbKIHsfma5PYaZTFbn0JGOlOTVe1MUnaY6g_Htt0=w1632-h878",
    "https://lh3.googleusercontent.com/fife/AMPSemdR4PHUaXEoxzoDkesDVQdkwQKCBNMNpm7skEaSvUbe8u4JC278IDEUSCvzOSn-ojuj1bSjWWQc2RE89xZOl0S4-n0enkWOfTU6g71AUZ5kRgiP044O4EgVcDE4Ad0hCTxYVLY887lwjin0YpiyMO46VxkuD6yCA8A-zgKOmwbWazq7gbTfOSM-JTZELDqcPe7ncGcnnKQyTWXzliLfYi4JUtl4apa3Zt9KMr9QezERjF-FQyvul-wseFSML5yjs7amcUaUHtfrfZfjtxIH0W6KKp2lZV_xv_ltGVnrBiktm8Mulh5_HSFUYmhH7HzZgGHEoAinGjLFBUF4XOSnfALe3_NHHM8_3jLhvqJiZSJVlTKtf0znJvO_WFHbuzoyiXwrl-Q9asMr0I7Yg3AhWq6XH_0TmZ4476w5mPSv3gvDZlBATNFCnrSp_9Lm7QgYr4KAjjhhwJUjmrJzR7p-oSbKK_QhdPnWn6m0s7--9rhmOkqjYVZNzStgoCkFbANY6kwbcP58hsOsjctFYBMsRDC5XVuC_BWlY7yiAaJ4XMIwyi5OZE1C1eg2BqVC_3B-Xt7ketXQoFLH506fwYMRfFn6fOiXazKfQMJiaCj06y8IplD8ptluLTLWB17tm4rlIjp9gNlDXRHLpmZNxFuUhyU7KffR7WMVJy2NNfW_vLGAre7WCzaj_hxBz6Xi8OBr7ag95vwOMafYvO8cj4BrIS2x39EeOrvjcXqHErDkgkLM6kaefOphTYq6zENRGp-BtsByAzYRe1U09_Dpuv17aZBHE04Nh2ZqHbhkPq_EAva5nOqaYGVxe5Ek-OQfkLkEQPE8l8z2YKohwxP54_AkAMHk9eS3KLE1OZo3pnozd9U1Wx6bW8_7LnyKLp5ACFIlF9-8XBy0nICwFypqt3Dfv0vzpGdDcL_z0yUOql5sSSorFnh3W4qMw5Ad7G7ytlzaC_dmbfkH0veytPuN02DTDw6e1IzyGAvAXvSe-PXA9K2WfajM6Rv3oQXJ8_WIkqHwDqRHjQuHJxxPxzY3l8VFui0Qyvgcc83kCRTKVsUQNhrUHQFKDniDmQRStEsBkHPvxjbQbiYND_Bi6fZn_8Jq4iHd5afVruLzWAGdLqK-GnumpkeT35AveA09ro7Eib0vy_vmK8SgfsiBNzKpvWHYVZXR9fJkJrOYGu8I5RnK-8MoU2fUQvMn4bRaIwQuplK6fMiP21hrvOyNjEq3oWiGNJbP-W7bXGUo4Wzt5qC2-8uiVCevwOineD_ENeJIecwo7kGNit9YttGKgRwE6yC43yKgYHMro9SV5RXEeidr81ILVCWSt3HZcN14L0wtPZ8ZhhoT9h4Z4YW1ph2A2Sgpl5C3d4zKlracvAumxvK92AbRQkoJBBztaI7A5SYvInXrsqUR-tQ4whwbWtgquiIXPw3vYRWoy3sCNjCe_bb-dMCgkIQiDRWVpxyCdPj19x2VrKVG_UNwN_dBtrheyJhaSgEIg5G_Jdu2yoPqaXKmwyZyOI-I44UNb0hh=w1632-h878",
    "https://lh3.googleusercontent.com/fife/AMPSemdbfHBgND2GtVB4m_MMoh9MKV7Cz0Vrpren-Zk5RwqFa2RqlrpWIfgopNKdvoc5nkc8LfcXdW1_k_vwBjET1R-Nkyf2dGxU9APwNOe0D3BhIZV_le3_KKKd4jRZlOfHaNDHINse87uY5CX3-_icS6bTKuszsBC7F0b7PcORylZAaaoaQQiO0bIfzhaPcQJx67yQBv1hYu9WGbVXYi4Myv6ExqpdP7s2U7hIY_fup3mTTbGxY3Jggot-KC2I4OZnLRkOKsvm1_UZCDZHjdcM__O-Wr7IGqMXQ_ds3ooWUsEy_tojfHbZlGWa2dY7EfNvAENGNcumh-FVit2Y5raXfnYkSbTAfnFZGdgUZDHSMuK_2JEXURNTCJ2dS2ewQDitqdWwd2boyF8Hx2VLZXzNDCcqnRd4xJ3MwiGutCCb5YX0ZocLp_yoBZLIvjPG5qV-FYhv0XlMECBlQBCOdSvL-m_giQ48cNecrcv2bLQdFb8H9xukA2yYV55ANASEMS7WYynzcR5NGeR3NPGOJ63tQaKBOT2w_-5CI-MBznvk345SgYNKFHZ_S9v_W_E5n_44hKIjmSPcIXdBHLyocVl18mcWVQdyY6dFaNHjPUw7eY94o1hb8DAHuipmBTMb9EJCBIQB9iXLE_EtPmZtcQUrDwJm-Y5TOBLEsSQv7YyZxMgFRSegQLBUSQDe_zp9hw9Aww29Zq4YEW26XVCo2ki3rnFrj8JOfOT7J4cr2t9nUi4R72Rv5bhCqGqJ__opM3BE1OC9Klhu5S7SOba2TM0Uu4HxfNgA9XJJlboTSoXXZA-m7i69JFZDT6kerEHZm5_B_BWS9XhchRXb7wTJe6q8Rr1qx4aDvvx0nGdJ2bHmoooWgINtl5N-LY0uvOxVXxBhQYW0nYcxrA4DxufJmrszke91tklC6quWlFYWLJdETpJYjrUhPoalXnS6lAdk_mt-KwZOT5TMAiZ-QZyIHyzof05Mt0l_oFPGGPkaLMCUOkT7l0hlSS52zblzY8doKWmFjIIUJ39qkYTGK7RSdMJvoUpaB8ETl0r_0b0CvqJlZFq9W4oAdrAxN4G-wvLU9Bn_J3o1zbK8czBNrlPpWP-Yoc4muVs4Mc3Xx1Yt5givgJ5EfyTRldHJo7uBXrH3SR2LUOSnixk5HxRzp9TYqUa_n--fPccJMjK_kW7aVG6PKtoQtCiOnoYLZfjh4YngAuBS6M5Ra9UTyxbjE1PmUHW_6xEgYpQvk2fPieaOnsgoVFsE5rtCY92YLmelWmLlzREyPJUeCsGmk_MyiXJk_seUnz8XbSg3kRXScrZ9jYbKApNupAt0tmEHG24enRNjTBvuLtKe-d9KTg8qkleGbNvaDEymqW9UKVR_IC6-biqNm03X-ZcRlMY-EcKEjeRqlC7n1k1KuRQzs_pWCC2G9ihyic5K7nzZBkC6cXnOq0XX51XPHHJzAZOqS3bEstCGFyXWc7F4UdYYSD1Qt6WN4696qAYEynVm5VaziJHf8M1Q8t12RPu6qARzZt2R=w1632-h878",
    "https://lh3.googleusercontent.com/fife/AMPSemdhfdu0DFUssRu6ZdWdVn8APmKKpmCPaFFAnehrGdgRKYP2Sd0f0p22XEW4S6zySyJXR4FoxzM6IG8IdYgNYtes_Yr7zqVwsA23s2bbwARKB6hfw6HKDTz3yUeiZon1jvoLOZoI40Rh5XHK9GsRI8dyOZvWag_lWHfZZWF88K0smYXXplpe3x27WdUCwx7qOThsJ18f1BcPEOAOerrWI-GKt_PD4pg_D5xSxsJLN7CB6U2aH-TxtlJD0be91zXJtCADDqX2Y2HWn1eCa9hIsxmgPloH3uIjcvkqzJ9Z0EqXbueLeR-fmBIBgy1tkyGozmgGSkFhHCJ0BMu10iT3rtP9Xf-Tqnbp2_h7gRuyXJIpaAvxcEesiA77ZTa4K2_lm2_7YecGt3M0PVCrQzV-cofGFGrbcq0Is3jlLwILhPxhrjdj-rHFZXA_pjDh__TkKAksq6jOsGifOhtKOF-bCHrA8W47ZwM91vXVxkdJyE_d7gLWXc2-SVNxtKZEWv-vUbxM8aQQeWuSpddbcqZyP_vSjpVBIc9F7O8irLu7gono9SWW1_LKlGBLMsbqJg3v6Fz8cHgqy-woonDvqpIs9-RyHQKQ8gyM4twByCMY4jxOREDVHkruZAczNgrMwe_LJ7H7TSZkCPtS5E_RVcgBPLAr5l1XU1YbPz-tuG-tMU6iUDxfHXAJQ99TNCB6mEprAkjeKlExkYR8ZR8fHLTuUp7IpgxppnRXeT-rST5dn5DdJgAsJED9xROtodHqBRE7_AK_syVs1_bJyXYcgcQzFMHRRKJoqE9SlcdNAMwpxAxkNHhmFE0Tc3yxkP9UK4dxhbTPp1BavmhpGGgbEteh1S4k1LNQyqyb2oPxWlJst5KZxcDL4vJo1byTzV4geOgo59pnrGxprjw-XgaDK1QGv8uVB633xuXj-J7tYtbjngNSeoNd9Dcu_Ou6noUuh_5iIr7AOgk3ljQd56f-mDGbtYumQYJTmgQ6owC5QpGIl6_3GjGeTGlpu_tvXHwZrrSbIJX_lbvUe6fxl5rTY0puBe3XXaU03auxsq0Rs_xA6QHFI8GTE58iEfxxSRYmnyrKYj13IluCVps4Cq7OzFBttkuPbCcGltIe0Gch_WckRgCk_MK6Ms-ZUaRz9yrmaY2d-26LwsDfUKapcZZ1JA02TBPqjCb-nhJutjR26A3U-ng7jZ8H1VmxSXlJcy57ve69E7BK9bWGpsd5oqFNRkhX81Mdy9Ve5T5yNp7s0T_E78Zl22Nkbknp-ChD6_vusHVZ5oizyWD6piMJDwxR_4YX8G_UdLBUJ3AvoWgKYEmB0Smzdrsq0ncaui5__qKvOKZHQiVKQnU3Tdz0MkaJkt0ztyTjGN8hVtOw-ygj6WTqZU3UrWfzNxKIj_-WSxr5WsIbit_5uSpW7E0jIU-NMVMj2AsDzdqeDq2h447xo-2zI3EY4ghoNLhUBpyyzTy9OmXPPjLzWm3Tszsb4J-nEdG3FS_-TBzyq9BSC822ED3T_HS4u-koDMqCycd3=w1632-h878",
    "https://lh3.googleusercontent.com/fife/AMPSemf7EUTrD3kadgE7KicA6uhyOmm1dmoqATLensIn9fr60gmvj2LegjRSlwcbepU2zv4Hd-1hjp5wrkAzlK5lIZuHdpG84oYpO_fo2NAUCEHRwR8y0IkB5GLpXMuu2WFW_U6-vg-EGb9UNHVZxz2briOzbMvZOgaGOJC4rokkHU9andgCzYhX5VCbQjQ37niD6OqIFLxPuONM3dsSVP8KCvq22jcabWZL8zK2H255M4Bka1EYPV9qPhHx88EzfdI8-msiRFihaIA4uQRJBgXloYnHLT8LblwqU68sz6zNa4p0lN6H75P4D3cik66aboUZj3c4G44cz3_ijHn3o_N6Gj8ENzxfH_a0tR5tP8809KmMfFeNrDChZrvQbsZcj0ZnlS7Pqq7inr-_HLKMCuk3XA2AfyiqHswEGTBBKkaQdgb4MO8K3nRXHP6gHiMgRhr8V7KydR-s2EJi0OVmwb8oWtF8irDuDgNuvMcLlOBoEv-udiF7RhD4nA6e-1hhVttI3NOtnbHq2AHFrTADcaUJhnWrFlIWERLm0bKXCAfDS2EOgSTEwKrouo_2I9ws_QI-c0EEVSnPamkmVwX5NCpC_ViDT9D4wzlnCqYS_JHsKy6jsD6aY4CUidyIgdspQBFH-OHq7B5jK8MpY1l4-ZpWV9B6tpWTMvBsO4qiZC7E6Pi8t317kKmPLDIZJ-Svr9cE3ug53ogmnZQe8ZYZ_yelD3EFGIJ8fH9VP56mys4CoCAeDq1t1HKaDxzMOQgptTtSp55baqL7Kg306ORDa9l9RkZNxFkmEmpD-UvvCnGbP3Ljzh89lVoLfrgOeuBsl9UOBGzuAn6lNiRetDf-vYrfHLkbivC6xy2ul5URoBxX4Bv-vDcpnrUA60zrsrrAbtHNIokSLTO_8NZwdXQCV-NHjABJ_YLoqsmhWMg2Jv12GNlm3bywDf7w7e1s_oaL5_rdOFPaRjBcy-4Q7dMLPnmqzY_5wzHadgNiHkUARyw3oHTOtkp-R_zk5uaT3T0UcSIeMVKbuwvZII1o9BzL6UvzE5NkjL7T70Nd2DPlDd9b-F8mrIExg3-KjbkED0cPGaB9c0bmU33v8Gil0s8pkBMzJmq8H6-T0RNhD5x4254iluXe3AVyolkH2WZmtDD8ltdIKXUotI8JphBV9KwELHSmwMEVm3JkgfB3TmDRqzVsYVHRK38ucZHM7jVMfQ5uVw9jNemgJmD3yWsaaB3OAjaBm8JtnMk9D3-BUGvsMGY3J1b87s0rFKyoaXSKsYW3bjbKVwBXUvAbC-k3MUy0lCorI8rJmt9yqmS8oINQSqvzuhw8XPccv78paEIa_6o01t9KZrE1P0ExPhYFomz39j2hIDoS5hPm8alldr56Pe2d66_RQzlTM_-TZbWifSHKw9RLR-7NNLGHtupI_OCep2txF9baIindvcIS53FEL3M9GzWx3WIzpjWZL6UNtTZyHMeqzPsYa7kyPl7BPo2s_YeltsP0s882tpn_oiUrzONpW7NA36HSENYogjkU=w1632-h878",
    "https://lh3.googleusercontent.com/u/1/drive-viewer/AAOQEOQLLdr2rjO9b2wmmpIIy-zucKaGit8p8sDcWWKtcvgLx1zbLoQu1GVL_ISJWMaMEVQ-RFnHaql2x2fGo5f13QxBSOH9RA=w1632-h878",
#будут больше гиф, но позже
]



# --------------- Логи + Запуск ---------------
logging.basicConfig(
    filename='logs.log',
    filemode='w',
    format='%(asctime)s - %(message)s',
    datefmt='%d-%b-%y %H:%M:%S',
    level=logging.INFO
)
app = Client('session', api_id=9860905, api_hash='94f5043cba54370fb8d4f501166188ae')
with app:
    try:
        messages = app.send_message(owner, "Загрузка...")
        get_me = app.get_users("me")
        my_id = get_me.id
        ment = get_me.username
        time_now = datetime.datetime.now().strftime('%Y/%m/%d %H:%M:%S')
        messages.edit(f"🤖 Бот стартанул\n"
                      f"💼 Версия **{version}**\n"
                      f"⏳ Время запуска: `{time_now}`")
    except:
        pass
# ---------------- Основной код ----------------




# Старт
@app.on_message(filters.command('start'))
async def start(client, message):
    db(message.chat.id)
    try:
        client, message, result = await subsess(client, message)
        if result >= 1:
            mention = message.from_user.mention if message.from_user.mention else ' '
            buttons = [
                [
                    InlineKeyboardButton('📰 Новостной канал', url='https://t.me/Highrise_newsbaza'),
                    InlineKeyboardButton('😞 Меня заскамили...', url=f'https://t.me/{username_predlozhka}')
                ],
                [
                    InlineKeyboardButton('💬 Другие чаты', url='https://t.me/HIGHRISEHGRR'),
                    InlineKeyboardButton('✅ Как работает бот?', url='https://teletype.in/@pas_0/NphEJPvbV43#VwQn'),
                ]
            ]
            await app.send_video(message.chat.id, random.choice(start_gif),
f'''
**👋 Здравстуй {mention}!

🚫 /chk [@|ID] — Проверить, не мошенник ли кто-то
🔍 /me — Проверить есть ли вы в базе

😃 Наслаждайтесь!**

P.S версия бота 2.2 BETA, по этому о всех ошибках сообщайте `@pas_0`
''', reply_to_message_id=message.id, reply_markup=InlineKeyboardMarkup(buttons))
    except FloodWait as e:
        asyncio.sleep(e.value)



#гарант в базу
@app.on_message(pyrogram.filters.command(["garant"]))
def add_guarantor(client, message):
    if message.from_user.id != owner:
        message.reply_text("Вы не являетесь владельцем.")
        print("Not owner")
        return
    user_id = message.reply_to_message.from_user.id
    name = message.reply_to_message.from_user.first_name
    username = message.reply_to_message.from_user.username
    description = message.text.split(" ", maxsplit=1)[1]
    file_path = os.path.join(garant_path, f"{user_id}")
    with open(file_path, "w", encoding="utf-8") as f:
        f.write(f"{name}:{description}")
        message.reply_text(f"Гарант: <a href='tg://user?id={user_id}'>{name}</a>\nID: `{user_id}`\nОписание: **{description}**")
#  Гарант убрать из базы
@app.on_message(pyrogram.filters.command(["delgarant"]))
def del_garant(client, message):
    if message.from_user.id != owner:
        message.reply_text("Вы не являетесь владельцем.")
        print("Not owner")
        return
    user_id = message.text.split(" ", maxsplit=1)[1]
    if user_id.startswith("@"):
        user = client.get_users(user_id[1:])
        if user is None:
            message.reply_text("Человек не найден.")
            return
        user_id = user.id
    else:
        try:
            user_id = int(user_id)
        except ValueError:
            message.reply_text("ID должен быть числом.")
            return
    file_path = os.path.join(garant_path, f"{user_id}")
    try:
        os.remove(file_path)
        message.reply_text(f"Гарант с айди `{user_id}` удален.")
    except FileNotFoundError:
        message.reply_text(f"Гарант с айди `{user_id}` не найден.")



# стата: скамеры / гаранты
@app.on_message(pyrogram.filters.command(["stats"]))
async def stats(client, message):
    response = await message.reply_video(random.choice(start_gif), duration=2, caption="Достаю статистику из кармана..")
    await asyncio.sleep(4)
    scam_count = len(os.listdir(scam_path)) # Подсчет количества файлов в папке scam
    stats_text = f"🧑‍💻| **Гарант - третья сторона в сделке, предотвращающая обман первой стороны второй стороной.**\n\n"
    stats_text += f"Количество скамеров: {scam_count}\n\n"
    stats_text += "Список гарантов:\n"
    for filename in os.listdir(garant_path):
        file_path = os.path.join(garant_path, filename)
        try:
            with open(file_path, "r", encoding="utf-8") as f:
                contents = f.read().split(":")
                username = contents[0]
                description = contents[1]
                user_id = int(filename.split(".")[0])
                user = await client.get_users(user_id)
                stats_text += f"<a href='tg://user?id={user_id}'>{username}</a>: {description}\n"

        except Exception as e:
            print("")

    reply_markup = InlineKeyboardMarkup([[
        InlineKeyboardButton('💬 Наши другие чаты', url='https://t.me/HIGHRISEHGRR'),
        InlineKeyboardButton('🧐 Кто такой гарант?', url='https://teletype.in/@pas_0/NphEJPvbV43'),
    ]])

    await response.edit_text(stats_text, reply_markup=reply_markup)




# Выдача админки
@app.on_message(filters.command('admin'))
async def adm(client, message):
    db(message.chat.id)
    try:
        client, message, result = await subsess(client, message)
        if result >= 1:
            if int(message.from_user.id) == int(owner):
                await write_DB(f"admin/{message.reply_to_message.from_user.id}", "0")
                try:
                    ment = f"{message.reply_to_message.from_user.mention} (`{message.reply_to_message.from_user.id}`)"
                except:
                    ment = f"`{message.reply_to_message.from_user.id}`"

                await app.send_message(
                    chat_id=message.chat.id,
                    text=f'Выдал админку {mention}',
                    reply_to_message_id=message.id,
                )
    except FloodWait as e:
        asyncio.sleep(e.value)


@app.on_message(filters.command('unadmin'))
async def unadmin(client, message):
    db(message.chat.id)
    try:
        client, message, result = await subsess(client, message)
        if result >= 1:
            if int(message.from_user.id) == int(owner):
                os.remove(f"admin/{str(message.reply_to_message.from_user.id)}")
                try:
                    ment = f"{message.reply_to_message.from_user.mention} (`{message.reply_to_message.from_user.id}`)"
                except:
                    ment = f"`{message.reply_to_message.from_user.id}`"

                await app.send_message(
                    chat_id=message.chat.id,
                    text=f'Убрал админку {mention}',
                    reply_to_message_id=message.id,
                )
    except FloodWait as e:
        asyncio.sleep(e.value)



# добавление в базу
@app.on_message(filters.command('global'))
async def global_command(client, message):
    try:
        _, _, result = await subsess(client, message)
        if result >= 1:
            ids = message.text.split()[1]
            reason = message.text.split(f"/global {ids} ", maxsplit=1)[1]

            _, _, number = await get_id(client, message, ids)
            ids = str(number)

            username = message.chat.username
            if username == None:
                username = message.chat.id
                if username > 0:
                    pass
                else:
                    username += 1000000000000
                username = abs(username)
                username = f"c/{str(username)}"

            try:
                proofs = f"https://t.me/{username}/{message.reply_to_message.id}"
                proof_text = f"""📝| <a href="{proofs}"</a>\n"""
            except:
                proofs = "None"
                proof_text = ""

            if Path(f"admin/{str(message.from_user.id)}").is_file():
                await write_DB(f"scam/{ids}", str(proofs + " " + reason))

            result_text = f"""
ㅤ❗️НОВОЕ ЛИЦО В БАЗЕ ДАННЫХ❗️

🆔| <code>{str(ids)}</code>
✏️| ПРИЧИНА: {reason} 

"""
            await app.send_message(
                chat_id=message.chat.id,
                text=f"{result_text}",
                reply_to_message_id=message.id,
                
                reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton("ПРУФЫ",url=f"{proofs}"),
                        InlineKeyboardButton("ПРОФИЛЬ",url=f"tg://user?id={str(ids)}")
                    ]
                ]
            )
        )
                       

            for link in os.listdir("db_group"):
                try:
                    await app.ban_chat_member(int(link), int(ids))
                except Exception as e:
                    print(f"Error banning user: {e}")
    except Exception as e:
        print(f"Error executing global command: {e}")



# убирает файл + разбан
@app.on_message(filters.command('unban'))
async def unban(client, message):
    try:
        username = message.text.split()[1]
        user = await app.get_users(username)
        user_id = user.id

        if os.path.exists(f"scam/{user_id}"):
            os.remove(f"scam/{user_id}")

            for link in os.listdir("db_group"):
                chat_id = int(link.replace(".pickle", ""))
                try:
                    await app.unban_chat_member(chat_id, user_id)
                except:
                    pass
            await message.reply("**✅ | Пользователь разбанен**")
        else:
            await message.reply("**⚠ | Пользователь не забанен**")
    except Exception as e:
        await message.reply(f"**⚠ | ОШИБКА {e} при разблокировке пользователя**")




# Команда me
@app.on_message(filters.command(['me', 'chk me', 'check me']))
async def me(client, message):
    db(message.chat.id)
    try:
        client, message, result = await subsess(client, message)
        if result >= 1:
            number = str(message.from_user.id)
            await check(client, message, number)
    except FloodWait as e:
        asyncio.sleep(e.value)


# Команда chk
@app.on_message(filters.command(['chk']))
async def check(client, message):
    db(message.chat.id)
    try:
        number = message.text.split()[1]
        user = await app.get_users(number)
        if not user:
            return
        await check(client, message, number)
    except:
        resultated = f"""
💡 | Внимание, использование вашей команды неверно. 
Пожалуйста, придерживайтесь правильного формата:
**Проверить по имени пользователя: /chk `@PAS_0`**

Если вы все правильно написали, скорее всего бот не смог получить ID человека.
Проверьте человека следующим способом:
**Проверить по ID: /chk 5721028095**
"""
        await app.send_message(
            chat_id=message.chat.id,
            text=f"{resultated}",
            reply_to_message_id=message.id,
            reply_markup=InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton(
                        "ЧТО ТАКОЕ АЙДИ?",url=f'https://t.me/HGRMATE/203'  
                    ),
                ],
            ]
        )
    ),


# Рассылка
# Рассылка
@app.on_message(filters.chat(rassilka))
async def rassilka(client, message):
    db(message.chat.id)
    accept = 0
    deny = 0
    now = datetime.datetime.now().strftime("%Y.%m.%d %H:%M:%S")
    l = os.listdir("db")
    g = await app.send_message(
        chat_id=owner,
        text=f"✈️** | Рассылка запущена!\n⏳ | Начало {now}\n💼 | БД: {len(l)} человек**",
    )
    for i in l:
        try:
            await client.forward_messages(
                chat_id=int(i),
                from_chat_id=message.chat.id,
                message_ids=message.id,
            )
            accept += 1
        except:
            deny += 1
    now2 = datetime.datetime.now().strftime("%Y.%m.%d %H:%M:%S")
    await g.edit(f"✈️ | Рассылка завершена!\n⏳ **| Начало: {now}\n⌛️ | Конец: {now2}\n💼 | БД: {len(l)}\n✅ | Успешно: {accept}\nБез-успешно: {deny}**")



@app.on_message(filters.group & ~(filters.new_chat_members & filters.me & filters.service))
def LocatedScam_new(client, message):
    db(message.chat.id)
    try:
        chat_id = int(message.chat.id)
        number = int(message.from_user.id)
        ment = message.from_user.mention

        try:
            my_text = message.caption.lower()
        except:
            try:
                my_text = message.text.lower()
            except:
                my_text = ""

        if Path(f"scam/{str(number)}").is_file():
            try:
                app.ban_chat_member(int(chat_id), int(number))
                message.delete()
            except:
                try:
                    message.delete()
                except:
                    texted = f"**⚠️ |  ({ment}|`{str(number)}`) находится в нашей базе, крайне не рекомендуется как либо контактировать с ним**"
                    my_text += " скам"

        allhelped = []
        
        if (re.compile("(оффтоп|офтоп|не по теме)").search(my_text)) and (chat_id == id_predlozhka):
            allhelped.append([InlineKeyboardButton("**📛 | Наш оффтоп чат**", url=linkofftop)],)

        if (re.compile("(скам|обман|ссылка|скамер|меня заскамили)").search(my_text)) and (chat_id != id_predlozhka):
            allhelped.append([InlineKeyboardButton("**⚠️ | Слить скаммера в базу**", url=linkpredlozhka)],)

        try:
            texted = texted
        except:
            texted = "❓ | Могу ли я вам чем нибудь помочь?"

        app.send_message(
            chat_id=message.chat.id,
            text=texted,
            reply_to_message_id=message.id,
            reply_markup=InlineKeyboardMarkup(
                allhelped,
            )
        )
    except FloodWait as e:
        asyncio.sleep(e.value)



# Проверка на подписку
async def subsess(client, message):
    number = str(message.from_user.id)
    try:
        result = 0

        user_id = number
        mentiones = message.from_user.mention

        try:
            await app.get_chat_member(chat_id=str(username_channel), user_id=int(user_id))
            result += 1
        except:
            await app.send_message(
                chat_id=message.chat.id,
                text=f"**❗️ | {mentiones}, не забудьте подписаться на {username_channel} для бесперебойной работы бота 🔍**",
                reply_to_message_id=message.id,
                reply_markup=InlineKeyboardMarkup(
                    [
                        [
                            InlineKeyboardButton(
                                "➕ | Подписаться",
                                url=f"https://t.me/{username_channel}"
                            ),
                        ],
                    ]
                )
            )
    except:
        result += 1
    return client, message, result



async def get_id(client, message, number):
    try:
        number1 = int(number)
        number = str(number1)
    except:
        number1 = number.replace('@', '').replace('https://t.me/', '').replace('https://telegram.me/', '').replace('tg://openmessage?user_id=', '')
        users = await app.get_users(number1)
        number = int(users.id)
    return client, message, str(number)


async def check(client, message, number):
    try:
        client, message,number = await get_id(client, message, number)
        number = str(number)
        try:
            usermen = await app.get_users(int(number))
            ment = f"{usermen.mention}"
        except:
            ment = f"`{str(number)}`"

        if Path(f"scam/{number}").is_file():
            result = await read_DB(f"scam/{str(number)}")
            proof = result.split()[0]
            because = result.split(f"{str(proof)} ", maxsplit=1)[1]

            await app.send_video(
            message.chat.id, 
            random.choice(have_in_base_gif), 
            f'\n**⚠️ | осторожно! {ment} находится в базе данных.\n❓ | Причина: {because}\n ID | `{str(number)}`**', 
            reply_to_message_id=message.id,
            reply_markup=InlineKeyboardMarkup([
                [
                    InlineKeyboardButton(f'СООБЩИТЬ О МОШЕННИКЕ', url=linkpredlozhka),
                    InlineKeyboardButton("ПРУФЫ", url=f"{proof}"),
                ]
            ])
        )
        else:
            await app.send_video(message.chat.id, random.choice(dont_have_in_base_gif), f'✅ | {ment} нету в базе.', reply_to_message_id=message.id,
                reply_markup=InlineKeyboardMarkup(
                    [
                        [InlineKeyboardButton(f'СООБЩИТЬ О МОШЕННИКЕ', url=linkpredlozhka)],
                    ]
                )
            )
    except Exception as fff:
        print(fff)


async def write_DB(dir, text):
    with open(str(dir), "w+", encoding="utf-8") as f:
        f.write(str(text))
        f.close()


async def read_DB(dir):
    with open(str(dir), "r+", encoding="utf-8") as f:
        text = str(f.read())
        f.close()
    return text


def db(id):
    if Path(f"db/{str(id)}").is_file():
        pass
    else:
        with open(f"db/{str(id)}", "w+", encoding='utf-8') as f:
            f.write("0")
            f.close()

    if id <= -1000000000000:
        if Path(f"db_group/{str(id)}").is_file():
            pass
        else:
            with open(f"db_group/{str(id)}", "w+", encoding='utf-8') as f:
                f.write("0")
                f.close()



def start():
    for i in system_dir:
        if not os.path.exists(i):
            os.mkdir(i)
    logging.basicConfig(
        filename="logs.log",
        filemode="w",
        format="%(asctime)s - %(message)s",
        datefmt="%d-%b-%y %H:%M:%S",
        level=logging.INFO
    )
    app.run()



if __name__ == '__main__':
    start()

